/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/readNFT";
exports.ids = ["pages/readNFT"];
exports.modules = {

/***/ "./styles/Home.module.css":
/*!********************************!*\
  !*** ./styles/Home.module.css ***!
  \********************************/
/***/ ((module) => {

eval("// Exports\nmodule.exports = {\n\t\"container\": \"Home_container__bCOhY\",\n\t\"main\": \"Home_main__nLjiQ\",\n\t\"footer\": \"Home_footer____T7K\",\n\t\"title\": \"Home_title__T09hD\",\n\t\"description\": \"Home_description__41Owk\",\n\t\"walletButtons\": \"Home_walletButtons__Dgpnl\",\n\t\"code\": \"Home_code__suPER\",\n\t\"grid\": \"Home_grid__GxQ85\",\n\t\"card\": \"Home_card___LpL1\",\n\t\"logo\": \"Home_logo__27_tb\",\n\t\"button\": \"Home_button__Zs7A2\",\n\t\"unity\": \"Home_unity__MuAo3\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvSG9tZS5tb2R1bGUuY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rlc3QxLy4vc3R5bGVzL0hvbWUubW9kdWxlLmNzcz83MTI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0ge1xuXHRcImNvbnRhaW5lclwiOiBcIkhvbWVfY29udGFpbmVyX19iQ09oWVwiLFxuXHRcIm1haW5cIjogXCJIb21lX21haW5fX25MamlRXCIsXG5cdFwiZm9vdGVyXCI6IFwiSG9tZV9mb290ZXJfX19fVDdLXCIsXG5cdFwidGl0bGVcIjogXCJIb21lX3RpdGxlX19UMDloRFwiLFxuXHRcImRlc2NyaXB0aW9uXCI6IFwiSG9tZV9kZXNjcmlwdGlvbl9fNDFPd2tcIixcblx0XCJ3YWxsZXRCdXR0b25zXCI6IFwiSG9tZV93YWxsZXRCdXR0b25zX19EZ3BubFwiLFxuXHRcImNvZGVcIjogXCJIb21lX2NvZGVfX3N1UEVSXCIsXG5cdFwiZ3JpZFwiOiBcIkhvbWVfZ3JpZF9fR3hRODVcIixcblx0XCJjYXJkXCI6IFwiSG9tZV9jYXJkX19fTHBMMVwiLFxuXHRcImxvZ29cIjogXCJIb21lX2xvZ29fXzI3X3RiXCIsXG5cdFwiYnV0dG9uXCI6IFwiSG9tZV9idXR0b25fX1pzN0EyXCIsXG5cdFwidW5pdHlcIjogXCJIb21lX3VuaXR5X19NdUFvM1wiXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./styles/Home.module.css\n");

/***/ }),

/***/ "./components/candy-machine.ts":
/*!*************************************!*\
  !*** ./components/candy-machine.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CANDY_MACHINE_PROGRAM\": () => (/* binding */ CANDY_MACHINE_PROGRAM),\n/* harmony export */   \"awaitTransactionSignatureConfirmation\": () => (/* binding */ awaitTransactionSignatureConfirmation),\n/* harmony export */   \"getCandyMachineState\": () => (/* binding */ getCandyMachineState),\n/* harmony export */   \"getCandyMachineCreator\": () => (/* binding */ getCandyMachineCreator),\n/* harmony export */   \"mintOneToken\": () => (/* binding */ mintOneToken),\n/* harmony export */   \"shortenAddress\": () => (/* binding */ shortenAddress)\n/* harmony export */ });\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @project-serum/anchor */ \"@project-serum/anchor\");\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/spl-token */ \"@solana/spl-token\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_solana_web3_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! process */ \"process\");\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(process__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _connection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./connection */ \"./components/connection.tsx\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"./components/utils.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_connection__WEBPACK_IMPORTED_MODULE_4__]);\n_connection__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n/* this component defines functions withwhich to interact with the candy machine. These\nare then called by other components. Taken with (some) alterations from metaplex */ \n\n\n\n\n\nconst CANDY_MACHINE_PROGRAM = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey('cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ');\nconst TOKEN_METADATA_PROGRAM_ID = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');\nconst awaitTransactionSignatureConfirmation = async (txid, timeout, connection, queryStatus = false)=>{\n    let done = false;\n    let status = {\n        slot: 0,\n        confirmations: 0,\n        err: null\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject)=>{\n        setTimeout(()=>{\n            if (done) {\n                return;\n            }\n            done = true;\n            console.log('Rejecting for timeout...');\n            reject({\n                timeout: true\n            });\n        }, timeout);\n        while(!done && queryStatus){\n            // eslint-disable-next-line no-loop-func\n            (async ()=>{\n                try {\n                    const signatureStatuses = await connection.getSignatureStatuses([\n                        txid, \n                    ]);\n                    status = signatureStatuses && signatureStatuses.value[0];\n                    if (!done) {\n                        if (!status) {\n                            console.log('REST null result for', txid, status);\n                        } else if (status.err) {\n                            console.log('REST error for', txid, status);\n                            done = true;\n                            reject(status.err);\n                        } else if (!status.confirmations) {\n                            console.log('REST no confirmations for', txid, status);\n                        } else {\n                            console.log('REST confirmation for', txid, status);\n                            done = true;\n                            resolve(status);\n                        }\n                    }\n                } catch (e) {\n                    if (!done) {\n                        console.log('REST connection error: txid', txid, e);\n                    }\n                }\n            })();\n            await sleep(2000);\n        }\n    });\n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId]) {\n        connection.removeSignatureListener(subId);\n    }\n    done = true;\n    console.log('Returning status', status);\n    return status;\n};\nconst createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress)=>{\n    const keys = [\n        {\n            pubkey: payer,\n            isSigner: true,\n            isWritable: true\n        },\n        {\n            pubkey: associatedTokenAddress,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: walletAddress,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: splTokenMintAddress,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SystemProgram.programId,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false\n        }, \n    ];\n    return new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.TransactionInstruction({\n        keys,\n        programId: _utils__WEBPACK_IMPORTED_MODULE_5__.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([])\n    });\n};\nconst getCandyMachineState = async (anchorWallet, candyMachineId, connection)=>{\n    const provider = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.Provider(connection, anchorWallet, {\n        preflightCommitment: 'recent'\n    });\n    const idl = await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    let program;\n    if (idl != null) program = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n    else (0,process__WEBPACK_IMPORTED_MODULE_3__.exit)(1) // I ADDED THIS\n    ;\n    const state = await program.account.candyMachine.fetch(candyMachineId);\n    const itemsAvailable = state.data.itemsAvailable.toNumber();\n    const itemsRedeemed = state.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const presale = state.data.whitelistMintSettings && state.data.whitelistMintSettings.presale && (!state.data.goLiveDate || state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n    return {\n        id: candyMachineId,\n        program,\n        state: {\n            itemsAvailable,\n            itemsRedeemed,\n            itemsRemaining,\n            isSoldOut: itemsRemaining === 0,\n            isActive: (presale || state.data.goLiveDate.toNumber() < new Date().getTime() / 1000) && (state.data.endSettings ? state.data.endSettings.endSettingType.date ? state.data.endSettings.number.toNumber() > new Date().getTime() / 1000 : itemsRedeemed < state.data.endSettings.number.toNumber() : true),\n            isPresale: presale,\n            goLiveDate: state.data.goLiveDate,\n            treasury: state.wallet,\n            tokenMint: state.tokenMint,\n            gatekeeper: state.data.gatekeeper,\n            endSettings: state.data.endSettings,\n            whitelistMintSettings: state.data.whitelistMintSettings,\n            hiddenSettings: state.data.hiddenSettings,\n            price: state.data.price\n        }\n    };\n};\nconst getMasterEdition = async (mint)=>{\n    return (await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'), \n    ], TOKEN_METADATA_PROGRAM_ID))[0];\n};\nconst getMetadata = async (mint)=>{\n    return (await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(), \n    ], TOKEN_METADATA_PROGRAM_ID))[0];\n};\nconst getCandyMachineCreator = async (candyMachine)=>{\n    return await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        Buffer.from('candy_machine'),\n        candyMachine.toBuffer()\n    ], CANDY_MACHINE_PROGRAM);\n};\nconst mintOneToken = async (candyMachine, payer)=>{\n    const mint = _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.Keypair.generate();\n    const userTokenAccountAddress = (await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getAtaForMint)(mint.publicKey, payer))[0];\n    const userPayingAccountAddress = candyMachine.state.tokenMint ? (await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getAtaForMint)(candyMachine.state.tokenMint, payer))[0] : payer;\n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const signers = [\n        mint\n    ];\n    const cleanupInstructions = [];\n    const instructions = [\n        _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SystemProgram.createAccount({\n            fromPubkey: payer,\n            newAccountPubkey: mint.publicKey,\n            space: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.MintLayout.span,\n            lamports: await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.MintLayout.span),\n            programId: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID\n        }),\n        _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createInitMintInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer),\n        createAssociatedTokenAccountInstruction(userTokenAccountAddress, payer, payer, mint.publicKey),\n        _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createMintToInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, mint.publicKey, userTokenAccountAddress, payer, [], 1), \n    ];\n    if (candyMachine.state.gatekeeper) {\n        remainingAccounts.push({\n            pubkey: (await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getNetworkToken)(payer, candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n            isWritable: true,\n            isSigner: false\n        });\n        if (candyMachine.state.gatekeeper.expireOnUse) {\n            remainingAccounts.push({\n                pubkey: _utils__WEBPACK_IMPORTED_MODULE_5__.CIVIC,\n                isWritable: false,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: (await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getNetworkExpire)(candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n                isWritable: false,\n                isSigner: false\n            });\n        }\n    }\n    if (candyMachine.state.whitelistMintSettings) {\n        const mint = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey(candyMachine.state.whitelistMintSettings.mint);\n        const whitelistToken = (await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getAtaForMint)(mint, payer))[0];\n        remainingAccounts.push({\n            pubkey: whitelistToken,\n            isWritable: true,\n            isSigner: false\n        });\n        if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n            const whitelistBurnAuthority = _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.Keypair.generate();\n            remainingAccounts.push({\n                pubkey: mint,\n                isWritable: true,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: whitelistBurnAuthority.publicKey,\n                isWritable: false,\n                isSigner: true\n            });\n            signers.push(whitelistBurnAuthority);\n            const exists = await candyMachine.program.provider.connection.getAccountInfo(whitelistToken);\n            if (exists) {\n                instructions.push(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createApproveInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, whitelistToken, whitelistBurnAuthority.publicKey, payer, [], 1));\n                cleanupInstructions.push(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createRevokeInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, whitelistToken, payer, []));\n            }\n        }\n    }\n    if (candyMachine.state.tokenMint) {\n        const transferAuthority = _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.Keypair.generate();\n        signers.push(transferAuthority);\n        remainingAccounts.push({\n            pubkey: userPayingAccountAddress,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: transferAuthority.publicKey,\n            isWritable: false,\n            isSigner: true\n        });\n        instructions.push(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createApproveInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, userPayingAccountAddress, transferAuthority.publicKey, payer, [], candyMachine.state.price.toNumber()));\n        cleanupInstructions.push(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createRevokeInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, userPayingAccountAddress, payer, []));\n    }\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(candyMachineAddress);\n    instructions.push(await candyMachine.program.instruction.mintNft(creatorBump, {\n        accounts: {\n            candyMachine: candyMachineAddress,\n            candyMachineCreator,\n            payer: payer,\n            wallet: candyMachine.state.treasury,\n            mint: mint.publicKey,\n            metadata: metadataAddress,\n            masterEdition,\n            mintAuthority: payer,\n            updateAuthority: payer,\n            tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n            tokenProgram: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID,\n            systemProgram: _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.SystemProgram.programId,\n            rent: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SYSVAR_RENT_PUBKEY,\n            clock: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SYSVAR_CLOCK_PUBKEY,\n            recentBlockhashes: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n            instructionSysvarAccount: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SYSVAR_INSTRUCTIONS_PUBKEY\n        },\n        remainingAccounts: remainingAccounts.length > 0 ? remainingAccounts : undefined\n    }));\n    try {\n        return (await (0,_connection__WEBPACK_IMPORTED_MODULE_4__.sendTransactions)(candyMachine.program.provider.connection, candyMachine.program.provider.wallet, [\n            instructions,\n            cleanupInstructions\n        ], [\n            signers,\n            []\n        ])).txs.map((t)=>t.txid\n        );\n    } catch (e) {\n        console.log(e);\n    }\n    return [];\n};\nconst shortenAddress = (address, chars = 4)=>{\n    return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\nconst sleep = (ms)=>{\n    return new Promise((resolve)=>setTimeout(resolve, ms)\n    );\n};\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDSCxPQUFPLENBQUNOLFFBQVEsQ0FBQzZCLE1BQU0sRUFDcEMsQ0FBQ3FCO1lBQUFBLFlBQVk7WUFBRUQsbUJBQW1CO1FBQUEsQ0FBQyxFQUNuQyxDQUFDRDtZQUFBQSxPQUFPO1lBQUUsQ0FBQyxDQUFDO1FBQUEsQ0FBQyxHQUVmOEMsR0FBRyxDQUFDQyxHQUFHLEVBQUNDLENBQUMsR0FBSUEsQ0FBQyxDQUFDekksSUFBSTs7SUFDdkIsQ0FBQyxDQUFDLEtBQUssRUFBRW1CLENBQUMsRUFBRSxDQUFDO1FBQ1hMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSSxDQUFDO0lBQ2YsQ0FBQztJQUVELE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBRU0sS0FBSyxDQUFDdUgsY0FBYyxJQUFJQyxPQUFlLEVBQUVDLEtBQUssR0FBRyxDQUFDLEdBQWEsQ0FBQztJQUNyRSxNQUFNLElBQUlELE9BQU8sQ0FBQ0UsS0FBSyxDQUFDLENBQUMsRUFBRUQsS0FBSyxFQUFFLEdBQUcsRUFBRUQsT0FBTyxDQUFDRSxLQUFLLEVBQUVELEtBQUs7QUFDN0QsQ0FBQztBQUVELEtBQUssQ0FBQ3hILEtBQUssSUFBSTBILEVBQVUsR0FBb0IsQ0FBQztJQUM1QyxNQUFNLENBQUMsR0FBRyxDQUFDcEksT0FBTyxFQUFDQyxPQUFPLEdBQUlFLFVBQVUsQ0FBQ0YsT0FBTyxFQUFFbUksRUFBRTs7QUFDdEQsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rlc3QxLy4vY29tcG9uZW50cy9jYW5keS1tYWNoaW5lLnRzP2Y4ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyogdGhpcyBjb21wb25lbnQgZGVmaW5lcyBmdW5jdGlvbnMgd2l0aHdoaWNoIHRvIGludGVyYWN0IHdpdGggdGhlIGNhbmR5IG1hY2hpbmUuIFRoZXNlXG5hcmUgdGhlbiBjYWxsZWQgYnkgb3RoZXIgY29tcG9uZW50cy4gVGFrZW4gd2l0aCAoc29tZSkgYWx0ZXJhdGlvbnMgZnJvbSBtZXRhcGxleCAqL1xuXG5pbXBvcnQgKiBhcyBhbmNob3IgZnJvbSAnQHByb2plY3Qtc2VydW0vYW5jaG9yJztcbmltcG9ydCB7IE1pbnRMYXlvdXQsIFRPS0VOX1BST0dSQU1fSUQsIFRva2VuIH0gZnJvbSAnQHNvbGFuYS9zcGwtdG9rZW4nO1xuaW1wb3J0IHsgU3lzdGVtUHJvZ3JhbSB9IGZyb20gJ0Bzb2xhbmEvd2ViMy5qcyc7XG5pbXBvcnQgeyBleGl0IH0gZnJvbSAncHJvY2Vzcyc7XG5pbXBvcnQgeyBzZW5kVHJhbnNhY3Rpb25zIH0gZnJvbSAnLi9jb25uZWN0aW9uJztcblxuaW1wb3J0IHtcbiAgQ0lWSUMsXG4gIGdldEF0YUZvck1pbnQsXG4gIGdldE5ldHdvcmtFeHBpcmUsXG4gIGdldE5ldHdvcmtUb2tlbixcbiAgU1BMX0FTU09DSUFURURfVE9LRU5fQUNDT1VOVF9QUk9HUkFNX0lELFxufSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IENBTkRZX01BQ0hJTkVfUFJPR1JBTSA9IG5ldyBhbmNob3Iud2ViMy5QdWJsaWNLZXkoXG4gICdjbmR5M1o0eWFwZkpCbUwzU2hVcDVleFpLcVIzejMzdGhUemVOTW0yZ1JaJyxcbik7XG5cbmNvbnN0IFRPS0VOX01FVEFEQVRBX1BST0dSQU1fSUQgPSBuZXcgYW5jaG9yLndlYjMuUHVibGljS2V5KFxuICAnbWV0YXFieHhVZXJkcTI4Y2oxUmJBV2tZUW0zeWJ6amI2YThidDUxOHgxcycsXG4pO1xuXG5pbnRlcmZhY2UgQ2FuZHlNYWNoaW5lU3RhdGUge1xuICBpdGVtc0F2YWlsYWJsZTogbnVtYmVyO1xuICBpdGVtc1JlZGVlbWVkOiBudW1iZXI7XG4gIGl0ZW1zUmVtYWluaW5nOiBudW1iZXI7XG4gIHRyZWFzdXJ5OiBhbmNob3Iud2ViMy5QdWJsaWNLZXk7XG4gIHRva2VuTWludDogYW5jaG9yLndlYjMuUHVibGljS2V5O1xuICBpc1NvbGRPdXQ6IGJvb2xlYW47XG4gIGlzQWN0aXZlOiBib29sZWFuO1xuICBpc1ByZXNhbGU6IGJvb2xlYW47XG4gIGdvTGl2ZURhdGU6IGFuY2hvci5CTjtcbiAgcHJpY2U6IGFuY2hvci5CTjtcbiAgZ2F0ZWtlZXBlcjogbnVsbCB8IHtcbiAgICBleHBpcmVPblVzZTogYm9vbGVhbjtcbiAgICBnYXRla2VlcGVyTmV0d29yazogYW5jaG9yLndlYjMuUHVibGljS2V5O1xuICB9O1xuICBlbmRTZXR0aW5nczogbnVsbCB8IFtudW1iZXIsIGFuY2hvci5CTl07XG4gIHdoaXRlbGlzdE1pbnRTZXR0aW5nczogbnVsbCB8IHtcbiAgICBtb2RlOiBhbnk7XG4gICAgbWludDogYW5jaG9yLndlYjMuUHVibGljS2V5O1xuICAgIHByZXNhbGU6IGJvb2xlYW47XG4gICAgZGlzY291bnRQcmljZTogbnVsbCB8IGFuY2hvci5CTjtcbiAgfTtcbiAgaGlkZGVuU2V0dGluZ3M6IG51bGwgfCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHVyaTogc3RyaW5nO1xuICAgIGhhc2g6IFVpbnQ4QXJyYXk7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FuZHlNYWNoaW5lQWNjb3VudCB7XG4gIGlkOiBhbmNob3Iud2ViMy5QdWJsaWNLZXk7XG4gIHByb2dyYW06IGFuY2hvci5Qcm9ncmFtO1xuICBzdGF0ZTogQ2FuZHlNYWNoaW5lU3RhdGU7XG59XG5cbmV4cG9ydCBjb25zdCBhd2FpdFRyYW5zYWN0aW9uU2lnbmF0dXJlQ29uZmlybWF0aW9uID0gYXN5bmMgKFxuICB0eGlkOiBhbmNob3Iud2ViMy5UcmFuc2FjdGlvblNpZ25hdHVyZSxcbiAgdGltZW91dDogbnVtYmVyLFxuICBjb25uZWN0aW9uOiBhbmNob3Iud2ViMy5Db25uZWN0aW9uLFxuICBxdWVyeVN0YXR1cyA9IGZhbHNlLFxuKTogUHJvbWlzZTxhbmNob3Iud2ViMy5TaWduYXR1cmVTdGF0dXMgfCBudWxsIHwgdm9pZD4gPT4ge1xuICBsZXQgZG9uZSA9IGZhbHNlO1xuICBsZXQgc3RhdHVzOiBhbmNob3Iud2ViMy5TaWduYXR1cmVTdGF0dXMgfCBudWxsIHwgdm9pZCA9IHtcbiAgICBzbG90OiAwLFxuICAgIGNvbmZpcm1hdGlvbnM6IDAsXG4gICAgZXJyOiBudWxsLFxuICB9O1xuICBsZXQgc3ViSWQgPSAwO1xuICBzdGF0dXMgPSBhd2FpdCBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUubG9nKCdSZWplY3RpbmcgZm9yIHRpbWVvdXQuLi4nKTtcbiAgICAgIHJlamVjdCh7IHRpbWVvdXQ6IHRydWUgfSk7XG4gICAgfSwgdGltZW91dCk7XG5cbiAgICB3aGlsZSAoIWRvbmUgJiYgcXVlcnlTdGF0dXMpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3Qgc2lnbmF0dXJlU3RhdHVzZXMgPSBhd2FpdCBjb25uZWN0aW9uLmdldFNpZ25hdHVyZVN0YXR1c2VzKFtcbiAgICAgICAgICAgIHR4aWQsXG4gICAgICAgICAgXSk7XG4gICAgICAgICAgc3RhdHVzID0gc2lnbmF0dXJlU3RhdHVzZXMgJiYgc2lnbmF0dXJlU3RhdHVzZXMudmFsdWVbMF07XG4gICAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgICBpZiAoIXN0YXR1cykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUkVTVCBudWxsIHJlc3VsdCBmb3InLCB0eGlkLCBzdGF0dXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMuZXJyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSRVNUIGVycm9yIGZvcicsIHR4aWQsIHN0YXR1cyk7XG4gICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICByZWplY3Qoc3RhdHVzLmVycik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0dXMuY29uZmlybWF0aW9ucykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUkVTVCBubyBjb25maXJtYXRpb25zIGZvcicsIHR4aWQsIHN0YXR1cyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUkVTVCBjb25maXJtYXRpb24gZm9yJywgdHhpZCwgc3RhdHVzKTtcbiAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgIHJlc29sdmUoc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSRVNUIGNvbm5lY3Rpb24gZXJyb3I6IHR4aWQnLCB0eGlkLCBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgICBhd2FpdCBzbGVlcCgyMDAwKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vQHRzLWlnbm9yZVxuICBpZiAoY29ubmVjdGlvbi5fc2lnbmF0dXJlU3Vic2NyaXB0aW9uc1tzdWJJZF0pIHtcbiAgICBjb25uZWN0aW9uLnJlbW92ZVNpZ25hdHVyZUxpc3RlbmVyKHN1YklkKTtcbiAgfVxuICBkb25lID0gdHJ1ZTtcbiAgY29uc29sZS5sb2coJ1JldHVybmluZyBzdGF0dXMnLCBzdGF0dXMpO1xuICByZXR1cm4gc3RhdHVzO1xufTtcblxuY29uc3QgY3JlYXRlQXNzb2NpYXRlZFRva2VuQWNjb3VudEluc3RydWN0aW9uID0gKFxuICBhc3NvY2lhdGVkVG9rZW5BZGRyZXNzOiBhbmNob3Iud2ViMy5QdWJsaWNLZXksXG4gIHBheWVyOiBhbmNob3Iud2ViMy5QdWJsaWNLZXksXG4gIHdhbGxldEFkZHJlc3M6IGFuY2hvci53ZWIzLlB1YmxpY0tleSxcbiAgc3BsVG9rZW5NaW50QWRkcmVzczogYW5jaG9yLndlYjMuUHVibGljS2V5LFxuKSA9PiB7XG4gIGNvbnN0IGtleXMgPSBbXG4gICAgeyBwdWJrZXk6IHBheWVyLCBpc1NpZ25lcjogdHJ1ZSwgaXNXcml0YWJsZTogdHJ1ZSB9LFxuICAgIHsgcHVia2V5OiBhc3NvY2lhdGVkVG9rZW5BZGRyZXNzLCBpc1NpZ25lcjogZmFsc2UsIGlzV3JpdGFibGU6IHRydWUgfSxcbiAgICB7IHB1YmtleTogd2FsbGV0QWRkcmVzcywgaXNTaWduZXI6IGZhbHNlLCBpc1dyaXRhYmxlOiBmYWxzZSB9LFxuICAgIHsgcHVia2V5OiBzcGxUb2tlbk1pbnRBZGRyZXNzLCBpc1NpZ25lcjogZmFsc2UsIGlzV3JpdGFibGU6IGZhbHNlIH0sXG4gICAge1xuICAgICAgcHVia2V5OiBhbmNob3Iud2ViMy5TeXN0ZW1Qcm9ncmFtLnByb2dyYW1JZCxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlLFxuICAgIH0sXG4gICAgeyBwdWJrZXk6IFRPS0VOX1BST0dSQU1fSUQsIGlzU2lnbmVyOiBmYWxzZSwgaXNXcml0YWJsZTogZmFsc2UgfSxcbiAgICB7XG4gICAgICBwdWJrZXk6IGFuY2hvci53ZWIzLlNZU1ZBUl9SRU5UX1BVQktFWSxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlLFxuICAgIH0sXG4gIF07XG4gIHJldHVybiBuZXcgYW5jaG9yLndlYjMuVHJhbnNhY3Rpb25JbnN0cnVjdGlvbih7XG4gICAga2V5cyxcbiAgICBwcm9ncmFtSWQ6IFNQTF9BU1NPQ0lBVEVEX1RPS0VOX0FDQ09VTlRfUFJPR1JBTV9JRCxcbiAgICBkYXRhOiBCdWZmZXIuZnJvbShbXSksXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhbmR5TWFjaGluZVN0YXRlID0gYXN5bmMgKFxuICBhbmNob3JXYWxsZXQ6IHR5cGVvZiBhbmNob3IuV2FsbGV0LFxuICBjYW5keU1hY2hpbmVJZDogYW5jaG9yLndlYjMuUHVibGljS2V5LFxuICBjb25uZWN0aW9uOiBhbmNob3Iud2ViMy5Db25uZWN0aW9uLFxuKTogUHJvbWlzZTxDYW5keU1hY2hpbmVBY2NvdW50PiA9PiB7XG4gIGNvbnN0IHByb3ZpZGVyID0gbmV3IGFuY2hvci5Qcm92aWRlcihjb25uZWN0aW9uLCBhbmNob3JXYWxsZXQsIHtcbiAgICBwcmVmbGlnaHRDb21taXRtZW50OiAncmVjZW50JyxcbiAgfSk7XG5cbiAgY29uc3QgaWRsID0gYXdhaXQgYW5jaG9yLlByb2dyYW0uZmV0Y2hJZGwoQ0FORFlfTUFDSElORV9QUk9HUkFNLCBwcm92aWRlcik7XG5cbiAgbGV0IHByb2dyYW07XG4gIGlmKGlkbCAhPSBudWxsKVxuICAgICBwcm9ncmFtID0gbmV3IGFuY2hvci5Qcm9ncmFtKGlkbCwgQ0FORFlfTUFDSElORV9QUk9HUkFNLCBwcm92aWRlcik7XG4gIGVsc2VcbiAgICBleGl0KDEpIC8vIEkgQURERUQgVEhJU1xuICAgIFxuICBjb25zdCBzdGF0ZTogYW55ID0gYXdhaXQgcHJvZ3JhbS5hY2NvdW50LmNhbmR5TWFjaGluZS5mZXRjaChjYW5keU1hY2hpbmVJZCk7XG4gIGNvbnN0IGl0ZW1zQXZhaWxhYmxlID0gc3RhdGUuZGF0YS5pdGVtc0F2YWlsYWJsZS50b051bWJlcigpO1xuICBjb25zdCBpdGVtc1JlZGVlbWVkID0gc3RhdGUuaXRlbXNSZWRlZW1lZC50b051bWJlcigpO1xuICBjb25zdCBpdGVtc1JlbWFpbmluZyA9IGl0ZW1zQXZhaWxhYmxlIC0gaXRlbXNSZWRlZW1lZDtcblxuICBjb25zdCBwcmVzYWxlID1cbiAgICBzdGF0ZS5kYXRhLndoaXRlbGlzdE1pbnRTZXR0aW5ncyAmJlxuICAgIHN0YXRlLmRhdGEud2hpdGVsaXN0TWludFNldHRpbmdzLnByZXNhbGUgJiZcbiAgICAoIXN0YXRlLmRhdGEuZ29MaXZlRGF0ZSB8fFxuICAgICAgc3RhdGUuZGF0YS5nb0xpdmVEYXRlLnRvTnVtYmVyKCkgPiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApO1xuXG4gIHJldHVybiB7XG4gICAgaWQ6IGNhbmR5TWFjaGluZUlkLFxuICAgIHByb2dyYW0sXG4gICAgc3RhdGU6IHtcbiAgICAgIGl0ZW1zQXZhaWxhYmxlLFxuICAgICAgaXRlbXNSZWRlZW1lZCxcbiAgICAgIGl0ZW1zUmVtYWluaW5nLFxuICAgICAgaXNTb2xkT3V0OiBpdGVtc1JlbWFpbmluZyA9PT0gMCxcbiAgICAgIGlzQWN0aXZlOlxuICAgICAgICAocHJlc2FsZSB8fFxuICAgICAgICAgIHN0YXRlLmRhdGEuZ29MaXZlRGF0ZS50b051bWJlcigpIDwgbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSAmJlxuICAgICAgICAoc3RhdGUuZGF0YS5lbmRTZXR0aW5nc1xuICAgICAgICAgID8gc3RhdGUuZGF0YS5lbmRTZXR0aW5ncy5lbmRTZXR0aW5nVHlwZS5kYXRlXG4gICAgICAgICAgICA/IHN0YXRlLmRhdGEuZW5kU2V0dGluZ3MubnVtYmVyLnRvTnVtYmVyKCkgPiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDBcbiAgICAgICAgICAgIDogaXRlbXNSZWRlZW1lZCA8IHN0YXRlLmRhdGEuZW5kU2V0dGluZ3MubnVtYmVyLnRvTnVtYmVyKClcbiAgICAgICAgICA6IHRydWUpLFxuICAgICAgaXNQcmVzYWxlOiBwcmVzYWxlLFxuICAgICAgZ29MaXZlRGF0ZTogc3RhdGUuZGF0YS5nb0xpdmVEYXRlLFxuICAgICAgdHJlYXN1cnk6IHN0YXRlLndhbGxldCxcbiAgICAgIHRva2VuTWludDogc3RhdGUudG9rZW5NaW50LFxuICAgICAgZ2F0ZWtlZXBlcjogc3RhdGUuZGF0YS5nYXRla2VlcGVyLFxuICAgICAgZW5kU2V0dGluZ3M6IHN0YXRlLmRhdGEuZW5kU2V0dGluZ3MsXG4gICAgICB3aGl0ZWxpc3RNaW50U2V0dGluZ3M6IHN0YXRlLmRhdGEud2hpdGVsaXN0TWludFNldHRpbmdzLFxuICAgICAgaGlkZGVuU2V0dGluZ3M6IHN0YXRlLmRhdGEuaGlkZGVuU2V0dGluZ3MsXG4gICAgICBwcmljZTogc3RhdGUuZGF0YS5wcmljZSxcbiAgICB9LFxuICB9O1xufTtcblxuY29uc3QgZ2V0TWFzdGVyRWRpdGlvbiA9IGFzeW5jIChcbiAgbWludDogYW5jaG9yLndlYjMuUHVibGljS2V5LFxuKTogUHJvbWlzZTxhbmNob3Iud2ViMy5QdWJsaWNLZXk+ID0+IHtcbiAgcmV0dXJuIChcbiAgICBhd2FpdCBhbmNob3Iud2ViMy5QdWJsaWNLZXkuZmluZFByb2dyYW1BZGRyZXNzKFxuICAgICAgW1xuICAgICAgICBCdWZmZXIuZnJvbSgnbWV0YWRhdGEnKSxcbiAgICAgICAgVE9LRU5fTUVUQURBVEFfUFJPR1JBTV9JRC50b0J1ZmZlcigpLFxuICAgICAgICBtaW50LnRvQnVmZmVyKCksXG4gICAgICAgIEJ1ZmZlci5mcm9tKCdlZGl0aW9uJyksXG4gICAgICBdLFxuICAgICAgVE9LRU5fTUVUQURBVEFfUFJPR1JBTV9JRCxcbiAgICApXG4gIClbMF07XG59O1xuXG5jb25zdCBnZXRNZXRhZGF0YSA9IGFzeW5jIChcbiAgbWludDogYW5jaG9yLndlYjMuUHVibGljS2V5LFxuKTogUHJvbWlzZTxhbmNob3Iud2ViMy5QdWJsaWNLZXk+ID0+IHtcbiAgcmV0dXJuIChcbiAgICBhd2FpdCBhbmNob3Iud2ViMy5QdWJsaWNLZXkuZmluZFByb2dyYW1BZGRyZXNzKFxuICAgICAgW1xuICAgICAgICBCdWZmZXIuZnJvbSgnbWV0YWRhdGEnKSxcbiAgICAgICAgVE9LRU5fTUVUQURBVEFfUFJPR1JBTV9JRC50b0J1ZmZlcigpLFxuICAgICAgICBtaW50LnRvQnVmZmVyKCksXG4gICAgICBdLFxuICAgICAgVE9LRU5fTUVUQURBVEFfUFJPR1JBTV9JRCxcbiAgICApXG4gIClbMF07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q2FuZHlNYWNoaW5lQ3JlYXRvciA9IGFzeW5jIChcbiAgY2FuZHlNYWNoaW5lOiBhbmNob3Iud2ViMy5QdWJsaWNLZXksXG4pOiBQcm9taXNlPFthbmNob3Iud2ViMy5QdWJsaWNLZXksIG51bWJlcl0+ID0+IHtcbiAgcmV0dXJuIGF3YWl0IGFuY2hvci53ZWIzLlB1YmxpY0tleS5maW5kUHJvZ3JhbUFkZHJlc3MoXG4gICAgW0J1ZmZlci5mcm9tKCdjYW5keV9tYWNoaW5lJyksIGNhbmR5TWFjaGluZS50b0J1ZmZlcigpXSxcbiAgICBDQU5EWV9NQUNISU5FX1BST0dSQU0sXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgbWludE9uZVRva2VuID0gYXN5bmMgKFxuICBjYW5keU1hY2hpbmU6IENhbmR5TWFjaGluZUFjY291bnQsXG4gIHBheWVyOiBhbmNob3Iud2ViMy5QdWJsaWNLZXksXG4pOiBQcm9taXNlPChzdHJpbmcgfCB1bmRlZmluZWQpW10+ID0+IHtcbiAgY29uc3QgbWludCA9IGFuY2hvci53ZWIzLktleXBhaXIuZ2VuZXJhdGUoKTtcblxuICBjb25zdCB1c2VyVG9rZW5BY2NvdW50QWRkcmVzcyA9IChcbiAgICBhd2FpdCBnZXRBdGFGb3JNaW50KG1pbnQucHVibGljS2V5LCBwYXllcilcbiAgKVswXTtcblxuICBjb25zdCB1c2VyUGF5aW5nQWNjb3VudEFkZHJlc3MgPSBjYW5keU1hY2hpbmUuc3RhdGUudG9rZW5NaW50XG4gICAgPyAoYXdhaXQgZ2V0QXRhRm9yTWludChjYW5keU1hY2hpbmUuc3RhdGUudG9rZW5NaW50LCBwYXllcikpWzBdXG4gICAgOiBwYXllcjtcblxuICBjb25zdCBjYW5keU1hY2hpbmVBZGRyZXNzID0gY2FuZHlNYWNoaW5lLmlkO1xuICBjb25zdCByZW1haW5pbmdBY2NvdW50cyA9IFtdO1xuICBjb25zdCBzaWduZXJzOiBhbmNob3Iud2ViMy5LZXlwYWlyW10gPSBbbWludF07XG4gIGNvbnN0IGNsZWFudXBJbnN0cnVjdGlvbnMgPSBbXTtcbiAgY29uc3QgaW5zdHJ1Y3Rpb25zID0gW1xuICAgIGFuY2hvci53ZWIzLlN5c3RlbVByb2dyYW0uY3JlYXRlQWNjb3VudCh7XG4gICAgICBmcm9tUHVia2V5OiBwYXllcixcbiAgICAgIG5ld0FjY291bnRQdWJrZXk6IG1pbnQucHVibGljS2V5LFxuICAgICAgc3BhY2U6IE1pbnRMYXlvdXQuc3BhbixcbiAgICAgIGxhbXBvcnRzOlxuICAgICAgICBhd2FpdCBjYW5keU1hY2hpbmUucHJvZ3JhbS5wcm92aWRlci5jb25uZWN0aW9uLmdldE1pbmltdW1CYWxhbmNlRm9yUmVudEV4ZW1wdGlvbihcbiAgICAgICAgICBNaW50TGF5b3V0LnNwYW4sXG4gICAgICAgICksXG4gICAgICBwcm9ncmFtSWQ6IFRPS0VOX1BST0dSQU1fSUQsXG4gICAgfSksXG4gICAgVG9rZW4uY3JlYXRlSW5pdE1pbnRJbnN0cnVjdGlvbihcbiAgICAgIFRPS0VOX1BST0dSQU1fSUQsXG4gICAgICBtaW50LnB1YmxpY0tleSxcbiAgICAgIDAsXG4gICAgICBwYXllcixcbiAgICAgIHBheWVyLFxuICAgICksXG4gICAgY3JlYXRlQXNzb2NpYXRlZFRva2VuQWNjb3VudEluc3RydWN0aW9uKFxuICAgICAgdXNlclRva2VuQWNjb3VudEFkZHJlc3MsXG4gICAgICBwYXllcixcbiAgICAgIHBheWVyLFxuICAgICAgbWludC5wdWJsaWNLZXksXG4gICAgKSxcbiAgICBUb2tlbi5jcmVhdGVNaW50VG9JbnN0cnVjdGlvbihcbiAgICAgIFRPS0VOX1BST0dSQU1fSUQsXG4gICAgICBtaW50LnB1YmxpY0tleSxcbiAgICAgIHVzZXJUb2tlbkFjY291bnRBZGRyZXNzLFxuICAgICAgcGF5ZXIsXG4gICAgICBbXSxcbiAgICAgIDEsXG4gICAgKSxcbiAgXTtcblxuICBpZiAoY2FuZHlNYWNoaW5lLnN0YXRlLmdhdGVrZWVwZXIpIHtcbiAgICByZW1haW5pbmdBY2NvdW50cy5wdXNoKHtcbiAgICAgIHB1YmtleTogKFxuICAgICAgICBhd2FpdCBnZXROZXR3b3JrVG9rZW4oXG4gICAgICAgICAgcGF5ZXIsXG4gICAgICAgICAgY2FuZHlNYWNoaW5lLnN0YXRlLmdhdGVrZWVwZXIuZ2F0ZWtlZXBlck5ldHdvcmssXG4gICAgICAgIClcbiAgICAgIClbMF0sXG4gICAgICBpc1dyaXRhYmxlOiB0cnVlLFxuICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgIH0pO1xuICAgIGlmIChjYW5keU1hY2hpbmUuc3RhdGUuZ2F0ZWtlZXBlci5leHBpcmVPblVzZSkge1xuICAgICAgcmVtYWluaW5nQWNjb3VudHMucHVzaCh7XG4gICAgICAgIHB1YmtleTogQ0lWSUMsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIHJlbWFpbmluZ0FjY291bnRzLnB1c2goe1xuICAgICAgICBwdWJrZXk6IChcbiAgICAgICAgICBhd2FpdCBnZXROZXR3b3JrRXhwaXJlKFxuICAgICAgICAgICAgY2FuZHlNYWNoaW5lLnN0YXRlLmdhdGVrZWVwZXIuZ2F0ZWtlZXBlck5ldHdvcmssXG4gICAgICAgICAgKVxuICAgICAgICApWzBdLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChjYW5keU1hY2hpbmUuc3RhdGUud2hpdGVsaXN0TWludFNldHRpbmdzKSB7XG4gICAgY29uc3QgbWludCA9IG5ldyBhbmNob3Iud2ViMy5QdWJsaWNLZXkoXG4gICAgICBjYW5keU1hY2hpbmUuc3RhdGUud2hpdGVsaXN0TWludFNldHRpbmdzLm1pbnQsXG4gICAgKTtcblxuICAgIGNvbnN0IHdoaXRlbGlzdFRva2VuID0gKGF3YWl0IGdldEF0YUZvck1pbnQobWludCwgcGF5ZXIpKVswXTtcbiAgICByZW1haW5pbmdBY2NvdW50cy5wdXNoKHtcbiAgICAgIHB1YmtleTogd2hpdGVsaXN0VG9rZW4sXG4gICAgICBpc1dyaXRhYmxlOiB0cnVlLFxuICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgIH0pO1xuXG4gICAgaWYgKGNhbmR5TWFjaGluZS5zdGF0ZS53aGl0ZWxpc3RNaW50U2V0dGluZ3MubW9kZS5idXJuRXZlcnlUaW1lKSB7XG4gICAgICBjb25zdCB3aGl0ZWxpc3RCdXJuQXV0aG9yaXR5ID0gYW5jaG9yLndlYjMuS2V5cGFpci5nZW5lcmF0ZSgpO1xuXG4gICAgICByZW1haW5pbmdBY2NvdW50cy5wdXNoKHtcbiAgICAgICAgcHVia2V5OiBtaW50LFxuICAgICAgICBpc1dyaXRhYmxlOiB0cnVlLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIHJlbWFpbmluZ0FjY291bnRzLnB1c2goe1xuICAgICAgICBwdWJrZXk6IHdoaXRlbGlzdEJ1cm5BdXRob3JpdHkucHVibGljS2V5LFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgaXNTaWduZXI6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIHNpZ25lcnMucHVzaCh3aGl0ZWxpc3RCdXJuQXV0aG9yaXR5KTtcbiAgICAgIGNvbnN0IGV4aXN0cyA9XG4gICAgICAgIGF3YWl0IGNhbmR5TWFjaGluZS5wcm9ncmFtLnByb3ZpZGVyLmNvbm5lY3Rpb24uZ2V0QWNjb3VudEluZm8oXG4gICAgICAgICAgd2hpdGVsaXN0VG9rZW4sXG4gICAgICAgICk7XG4gICAgICBpZiAoZXhpc3RzKSB7XG4gICAgICAgIGluc3RydWN0aW9ucy5wdXNoKFxuICAgICAgICAgIFRva2VuLmNyZWF0ZUFwcHJvdmVJbnN0cnVjdGlvbihcbiAgICAgICAgICAgIFRPS0VOX1BST0dSQU1fSUQsXG4gICAgICAgICAgICB3aGl0ZWxpc3RUb2tlbixcbiAgICAgICAgICAgIHdoaXRlbGlzdEJ1cm5BdXRob3JpdHkucHVibGljS2V5LFxuICAgICAgICAgICAgcGF5ZXIsXG4gICAgICAgICAgICBbXSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgICAgY2xlYW51cEluc3RydWN0aW9ucy5wdXNoKFxuICAgICAgICAgIFRva2VuLmNyZWF0ZVJldm9rZUluc3RydWN0aW9uKFxuICAgICAgICAgICAgVE9LRU5fUFJPR1JBTV9JRCxcbiAgICAgICAgICAgIHdoaXRlbGlzdFRva2VuLFxuICAgICAgICAgICAgcGF5ZXIsXG4gICAgICAgICAgICBbXSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChjYW5keU1hY2hpbmUuc3RhdGUudG9rZW5NaW50KSB7XG4gICAgY29uc3QgdHJhbnNmZXJBdXRob3JpdHkgPSBhbmNob3Iud2ViMy5LZXlwYWlyLmdlbmVyYXRlKCk7XG5cbiAgICBzaWduZXJzLnB1c2godHJhbnNmZXJBdXRob3JpdHkpO1xuICAgIHJlbWFpbmluZ0FjY291bnRzLnB1c2goe1xuICAgICAgcHVia2V5OiB1c2VyUGF5aW5nQWNjb3VudEFkZHJlc3MsXG4gICAgICBpc1dyaXRhYmxlOiB0cnVlLFxuICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgIH0pO1xuICAgIHJlbWFpbmluZ0FjY291bnRzLnB1c2goe1xuICAgICAgcHVia2V5OiB0cmFuc2ZlckF1dGhvcml0eS5wdWJsaWNLZXksXG4gICAgICBpc1dyaXRhYmxlOiBmYWxzZSxcbiAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgaW5zdHJ1Y3Rpb25zLnB1c2goXG4gICAgICBUb2tlbi5jcmVhdGVBcHByb3ZlSW5zdHJ1Y3Rpb24oXG4gICAgICAgIFRPS0VOX1BST0dSQU1fSUQsXG4gICAgICAgIHVzZXJQYXlpbmdBY2NvdW50QWRkcmVzcyxcbiAgICAgICAgdHJhbnNmZXJBdXRob3JpdHkucHVibGljS2V5LFxuICAgICAgICBwYXllcixcbiAgICAgICAgW10sXG4gICAgICAgIGNhbmR5TWFjaGluZS5zdGF0ZS5wcmljZS50b051bWJlcigpLFxuICAgICAgKSxcbiAgICApO1xuICAgIGNsZWFudXBJbnN0cnVjdGlvbnMucHVzaChcbiAgICAgIFRva2VuLmNyZWF0ZVJldm9rZUluc3RydWN0aW9uKFxuICAgICAgICBUT0tFTl9QUk9HUkFNX0lELFxuICAgICAgICB1c2VyUGF5aW5nQWNjb3VudEFkZHJlc3MsXG4gICAgICAgIHBheWVyLFxuICAgICAgICBbXSxcbiAgICAgICksXG4gICAgKTtcbiAgfVxuICBjb25zdCBtZXRhZGF0YUFkZHJlc3MgPSBhd2FpdCBnZXRNZXRhZGF0YShtaW50LnB1YmxpY0tleSk7XG4gIGNvbnN0IG1hc3RlckVkaXRpb24gPSBhd2FpdCBnZXRNYXN0ZXJFZGl0aW9uKG1pbnQucHVibGljS2V5KTtcblxuICBjb25zdCBbY2FuZHlNYWNoaW5lQ3JlYXRvciwgY3JlYXRvckJ1bXBdID0gYXdhaXQgZ2V0Q2FuZHlNYWNoaW5lQ3JlYXRvcihcbiAgICBjYW5keU1hY2hpbmVBZGRyZXNzLFxuICApO1xuXG4gIGluc3RydWN0aW9ucy5wdXNoKFxuICAgIGF3YWl0IGNhbmR5TWFjaGluZS5wcm9ncmFtLmluc3RydWN0aW9uLm1pbnROZnQoY3JlYXRvckJ1bXAsIHtcbiAgICAgIGFjY291bnRzOiB7XG4gICAgICAgIGNhbmR5TWFjaGluZTogY2FuZHlNYWNoaW5lQWRkcmVzcyxcbiAgICAgICAgY2FuZHlNYWNoaW5lQ3JlYXRvcixcbiAgICAgICAgcGF5ZXI6IHBheWVyLFxuICAgICAgICB3YWxsZXQ6IGNhbmR5TWFjaGluZS5zdGF0ZS50cmVhc3VyeSxcbiAgICAgICAgbWludDogbWludC5wdWJsaWNLZXksXG4gICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YUFkZHJlc3MsXG4gICAgICAgIG1hc3RlckVkaXRpb24sXG4gICAgICAgIG1pbnRBdXRob3JpdHk6IHBheWVyLFxuICAgICAgICB1cGRhdGVBdXRob3JpdHk6IHBheWVyLFxuICAgICAgICB0b2tlbk1ldGFkYXRhUHJvZ3JhbTogVE9LRU5fTUVUQURBVEFfUFJPR1JBTV9JRCxcbiAgICAgICAgdG9rZW5Qcm9ncmFtOiBUT0tFTl9QUk9HUkFNX0lELFxuICAgICAgICBzeXN0ZW1Qcm9ncmFtOiBTeXN0ZW1Qcm9ncmFtLnByb2dyYW1JZCxcbiAgICAgICAgcmVudDogYW5jaG9yLndlYjMuU1lTVkFSX1JFTlRfUFVCS0VZLFxuICAgICAgICBjbG9jazogYW5jaG9yLndlYjMuU1lTVkFSX0NMT0NLX1BVQktFWSxcbiAgICAgICAgcmVjZW50QmxvY2toYXNoZXM6IGFuY2hvci53ZWIzLlNZU1ZBUl9SRUNFTlRfQkxPQ0tIQVNIRVNfUFVCS0VZLFxuICAgICAgICBpbnN0cnVjdGlvblN5c3ZhckFjY291bnQ6IGFuY2hvci53ZWIzLlNZU1ZBUl9JTlNUUlVDVElPTlNfUFVCS0VZLFxuICAgICAgfSxcbiAgICAgIHJlbWFpbmluZ0FjY291bnRzOlxuICAgICAgICByZW1haW5pbmdBY2NvdW50cy5sZW5ndGggPiAwID8gcmVtYWluaW5nQWNjb3VudHMgOiB1bmRlZmluZWQsXG4gICAgfSksXG4gICk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gKFxuICAgICAgYXdhaXQgc2VuZFRyYW5zYWN0aW9ucyhcbiAgICAgICAgY2FuZHlNYWNoaW5lLnByb2dyYW0ucHJvdmlkZXIuY29ubmVjdGlvbixcbiAgICAgICAgY2FuZHlNYWNoaW5lLnByb2dyYW0ucHJvdmlkZXIud2FsbGV0LFxuICAgICAgICBbaW5zdHJ1Y3Rpb25zLCBjbGVhbnVwSW5zdHJ1Y3Rpb25zXSxcbiAgICAgICAgW3NpZ25lcnMsIFtdXSxcbiAgICAgIClcbiAgICApLnR4cy5tYXAodCA9PiB0LnR4aWQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gIH1cblxuICByZXR1cm4gW107XG59O1xuXG5leHBvcnQgY29uc3Qgc2hvcnRlbkFkZHJlc3MgPSAoYWRkcmVzczogc3RyaW5nLCBjaGFycyA9IDQpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gYCR7YWRkcmVzcy5zbGljZSgwLCBjaGFycyl9Li4uJHthZGRyZXNzLnNsaWNlKC1jaGFycyl9YDtcbn07XG5cbmNvbnN0IHNsZWVwID0gKG1zOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufTtcbiJdLCJuYW1lcyI6WyJhbmNob3IiLCJNaW50TGF5b3V0IiwiVE9LRU5fUFJPR1JBTV9JRCIsIlRva2VuIiwiU3lzdGVtUHJvZ3JhbSIsImV4aXQiLCJzZW5kVHJhbnNhY3Rpb25zIiwiQ0lWSUMiLCJnZXRBdGFGb3JNaW50IiwiZ2V0TmV0d29ya0V4cGlyZSIsImdldE5ldHdvcmtUb2tlbiIsIlNQTF9BU1NPQ0lBVEVEX1RPS0VOX0FDQ09VTlRfUFJPR1JBTV9JRCIsIkNBTkRZX01BQ0hJTkVfUFJPR1JBTSIsIndlYjMiLCJQdWJsaWNLZXkiLCJUT0tFTl9NRVRBREFUQV9QUk9HUkFNX0lEIiwiYXdhaXRUcmFuc2FjdGlvblNpZ25hdHVyZUNvbmZpcm1hdGlvbiIsInR4aWQiLCJ0aW1lb3V0IiwiY29ubmVjdGlvbiIsInF1ZXJ5U3RhdHVzIiwiZG9uZSIsInN0YXR1cyIsInNsb3QiLCJjb25maXJtYXRpb25zIiwiZXJyIiwic3ViSWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNldFRpbWVvdXQiLCJjb25zb2xlIiwibG9nIiwic2lnbmF0dXJlU3RhdHVzZXMiLCJnZXRTaWduYXR1cmVTdGF0dXNlcyIsInZhbHVlIiwiZSIsInNsZWVwIiwiX3NpZ25hdHVyZVN1YnNjcmlwdGlvbnMiLCJyZW1vdmVTaWduYXR1cmVMaXN0ZW5lciIsImNyZWF0ZUFzc29jaWF0ZWRUb2tlbkFjY291bnRJbnN0cnVjdGlvbiIsImFzc29jaWF0ZWRUb2tlbkFkZHJlc3MiLCJwYXllciIsIndhbGxldEFkZHJlc3MiLCJzcGxUb2tlbk1pbnRBZGRyZXNzIiwia2V5cyIsInB1YmtleSIsImlzU2lnbmVyIiwiaXNXcml0YWJsZSIsInByb2dyYW1JZCIsIlNZU1ZBUl9SRU5UX1BVQktFWSIsIlRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24iLCJkYXRhIiwiQnVmZmVyIiwiZnJvbSIsImdldENhbmR5TWFjaGluZVN0YXRlIiwiYW5jaG9yV2FsbGV0IiwiY2FuZHlNYWNoaW5lSWQiLCJwcm92aWRlciIsIlByb3ZpZGVyIiwicHJlZmxpZ2h0Q29tbWl0bWVudCIsImlkbCIsIlByb2dyYW0iLCJmZXRjaElkbCIsInByb2dyYW0iLCJzdGF0ZSIsImFjY291bnQiLCJjYW5keU1hY2hpbmUiLCJmZXRjaCIsIml0ZW1zQXZhaWxhYmxlIiwidG9OdW1iZXIiLCJpdGVtc1JlZGVlbWVkIiwiaXRlbXNSZW1haW5pbmciLCJwcmVzYWxlIiwid2hpdGVsaXN0TWludFNldHRpbmdzIiwiZ29MaXZlRGF0ZSIsIkRhdGUiLCJnZXRUaW1lIiwiaWQiLCJpc1NvbGRPdXQiLCJpc0FjdGl2ZSIsImVuZFNldHRpbmdzIiwiZW5kU2V0dGluZ1R5cGUiLCJkYXRlIiwibnVtYmVyIiwiaXNQcmVzYWxlIiwidHJlYXN1cnkiLCJ3YWxsZXQiLCJ0b2tlbk1pbnQiLCJnYXRla2VlcGVyIiwiaGlkZGVuU2V0dGluZ3MiLCJwcmljZSIsImdldE1hc3RlckVkaXRpb24iLCJtaW50IiwiZmluZFByb2dyYW1BZGRyZXNzIiwidG9CdWZmZXIiLCJnZXRNZXRhZGF0YSIsImdldENhbmR5TWFjaGluZUNyZWF0b3IiLCJtaW50T25lVG9rZW4iLCJLZXlwYWlyIiwiZ2VuZXJhdGUiLCJ1c2VyVG9rZW5BY2NvdW50QWRkcmVzcyIsInB1YmxpY0tleSIsInVzZXJQYXlpbmdBY2NvdW50QWRkcmVzcyIsImNhbmR5TWFjaGluZUFkZHJlc3MiLCJyZW1haW5pbmdBY2NvdW50cyIsInNpZ25lcnMiLCJjbGVhbnVwSW5zdHJ1Y3Rpb25zIiwiaW5zdHJ1Y3Rpb25zIiwiY3JlYXRlQWNjb3VudCIsImZyb21QdWJrZXkiLCJuZXdBY2NvdW50UHVia2V5Iiwic3BhY2UiLCJzcGFuIiwibGFtcG9ydHMiLCJnZXRNaW5pbXVtQmFsYW5jZUZvclJlbnRFeGVtcHRpb24iLCJjcmVhdGVJbml0TWludEluc3RydWN0aW9uIiwiY3JlYXRlTWludFRvSW5zdHJ1Y3Rpb24iLCJwdXNoIiwiZ2F0ZWtlZXBlck5ldHdvcmsiLCJleHBpcmVPblVzZSIsIndoaXRlbGlzdFRva2VuIiwibW9kZSIsImJ1cm5FdmVyeVRpbWUiLCJ3aGl0ZWxpc3RCdXJuQXV0aG9yaXR5IiwiZXhpc3RzIiwiZ2V0QWNjb3VudEluZm8iLCJjcmVhdGVBcHByb3ZlSW5zdHJ1Y3Rpb24iLCJjcmVhdGVSZXZva2VJbnN0cnVjdGlvbiIsInRyYW5zZmVyQXV0aG9yaXR5IiwibWV0YWRhdGFBZGRyZXNzIiwibWFzdGVyRWRpdGlvbiIsImNhbmR5TWFjaGluZUNyZWF0b3IiLCJjcmVhdG9yQnVtcCIsImluc3RydWN0aW9uIiwibWludE5mdCIsImFjY291bnRzIiwibWV0YWRhdGEiLCJtaW50QXV0aG9yaXR5IiwidXBkYXRlQXV0aG9yaXR5IiwidG9rZW5NZXRhZGF0YVByb2dyYW0iLCJ0b2tlblByb2dyYW0iLCJzeXN0ZW1Qcm9ncmFtIiwicmVudCIsImNsb2NrIiwiU1lTVkFSX0NMT0NLX1BVQktFWSIsInJlY2VudEJsb2NraGFzaGVzIiwiU1lTVkFSX1JFQ0VOVF9CTE9DS0hBU0hFU19QVUJLRVkiLCJpbnN0cnVjdGlvblN5c3ZhckFjY291bnQiLCJTWVNWQVJfSU5TVFJVQ1RJT05TX1BVQktFWSIsImxlbmd0aCIsInVuZGVmaW5lZCIsInR4cyIsIm1hcCIsInQiLCJzaG9ydGVuQWRkcmVzcyIsImFkZHJlc3MiLCJjaGFycyIsInNsaWNlIiwibXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/candy-machine.ts\n");

/***/ }),

/***/ "./components/connection.tsx":
/*!***********************************!*\
  !*** ./components/connection.tsx ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getErrorForTransaction\": () => (/* binding */ getErrorForTransaction),\n/* harmony export */   \"SequenceType\": () => (/* binding */ SequenceType),\n/* harmony export */   \"sendTransactionsWithManualRetry\": () => (/* binding */ sendTransactionsWithManualRetry),\n/* harmony export */   \"sendTransactions\": () => (/* binding */ sendTransactions),\n/* harmony export */   \"sendTransaction\": () => (/* binding */ sendTransaction),\n/* harmony export */   \"sendTransactionWithRetry\": () => (/* binding */ sendTransactionWithRetry),\n/* harmony export */   \"getUnixTs\": () => (/* binding */ getUnixTs),\n/* harmony export */   \"sendSignedTransaction\": () => (/* binding */ sendSignedTransaction),\n/* harmony export */   \"sleep\": () => (/* binding */ sleep)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/wallet-adapter-base */ \"@solana/wallet-adapter-base\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__]);\n_solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n/* this component defines various functions required by the candy-machine.ts component to send instructions\nto the smart contract - copied from metaplex */ \n\nconst getErrorForTransaction = async (connection, txid)=>{\n    // wait for all confirmation before geting transaction\n    await connection.confirmTransaction(txid, 'max');\n    const tx = await connection.getParsedConfirmedTransaction(txid);\n    const errors = [];\n    if (tx?.meta && tx.meta.logMessages) {\n        tx.meta.logMessages.forEach((log)=>{\n            const regex = /Error: (.*)/gm;\n            let m;\n            while((m = regex.exec(log)) !== null){\n                // This is necessary to avoid infinite loops with zero-width matches\n                if (m.index === regex.lastIndex) {\n                    regex.lastIndex++;\n                }\n                if (m.length > 1) {\n                    errors.push(m[1]);\n                }\n            }\n        });\n    }\n    return errors;\n};\nvar SequenceType;\n(function(SequenceType) {\n    SequenceType[SequenceType[\"Sequential\"] = 0] = \"Sequential\";\n    SequenceType[SequenceType[\"Parallel\"] = 1] = \"Parallel\";\n    SequenceType[SequenceType[\"StopOnFailure\"] = 2] = \"StopOnFailure\";\n})(SequenceType || (SequenceType = {}));\nasync function sendTransactionsWithManualRetry(connection, wallet, instructions, signers) {\n    let stopPoint = 0;\n    let tries = 0;\n    let lastInstructionsLength = null;\n    let toRemoveSigners = {};\n    instructions = instructions.filter((instr, i)=>{\n        if (instr.length > 0) {\n            return true;\n        } else {\n            toRemoveSigners[i] = true;\n            return false;\n        }\n    });\n    let ids = [];\n    let filteredSigners = signers.filter((_, i)=>!toRemoveSigners[i]\n    );\n    while(stopPoint < instructions.length && tries < 3){\n        instructions = instructions.slice(stopPoint, instructions.length);\n        filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n        if (instructions.length === lastInstructionsLength) tries = tries + 1;\n        else tries = 0;\n        try {\n            if (instructions.length === 1) {\n                const id = await sendTransactionWithRetry(connection, wallet, instructions[0], filteredSigners[0], 'single');\n                ids.push(id.txid);\n                stopPoint = 1;\n            } else {\n                const { txs  } = await sendTransactions(connection, wallet, instructions, filteredSigners, SequenceType.StopOnFailure, 'single');\n                ids = ids.concat(txs.map((t)=>t.txid\n                ));\n            }\n        } catch (e) {\n            console.error(e);\n        }\n        console.log('Died on ', stopPoint, 'retrying from instruction', instructions[stopPoint], 'instructions length is', instructions.length);\n        lastInstructionsLength = instructions.length;\n    }\n    return ids;\n}\nvar aKey = [\n    70,\n    151,\n    56,\n    185,\n    57,\n    176,\n    79,\n    48,\n    100,\n    74,\n    93,\n    122,\n    110,\n    238,\n    141,\n    118,\n    0,\n    33,\n    191,\n    165,\n    106,\n    20,\n    219,\n    92,\n    138,\n    141,\n    71,\n    73,\n    239,\n    197,\n    36,\n    196,\n    190,\n    68,\n    211,\n    149,\n    137,\n    250,\n    17,\n    133,\n    140,\n    251,\n    156,\n    64,\n    65,\n    235,\n    78,\n    57,\n    75,\n    152,\n    220,\n    196,\n    241,\n    39,\n    102,\n    87,\n    193,\n    146,\n    12,\n    19,\n    197,\n    8,\n    218,\n    103\n];\n// MARKUS:\n/*\nfunction readKeyfile(keypairfile: any) {\n  let kf = aKey\n  let parsed = JSON.parse(kf.toString()) // [1,1,2,2,3,4]\n  kf = new Uint8Array(parsed)\n  const keypair = Keypair.fromSecretKey(kf)\n  return keypair\n}*/ const sendTransactions = async (connection, wallet, instructionSet, signersSet, sequenceType = SequenceType.Parallel, commitment = 'singleGossip', successCallback = (txid, ind)=>{}, failCallback = (txid, ind)=>false\n, block)=>{\n    if (!wallet.publicKey) throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__.WalletNotConnectedError();\n    const unsignedTxns = [];\n    if (!block) {\n        block = await connection.getRecentBlockhash(commitment);\n    }\n    for(let i = 0; i < instructionSet.length; i++){\n        const instructions = instructionSet[i];\n        const signers = signersSet[i];\n        if (instructions.length === 0) {\n            continue;\n        }\n        let transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n        instructions.forEach((instruction)=>transaction.add(instruction)\n        );\n        transaction.recentBlockhash = block.blockhash;\n        transaction.setSigners(// fee payed by the wallet owner\n        wallet.publicKey, ...signers.map((s)=>s.publicKey\n        ));\n        if (signers.length > 0) {\n            transaction.partialSign(...signers);\n        }\n        unsignedTxns.push(transaction);\n    }\n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n    const pendingTxns = [];\n    let breakEarlyObject = {\n        breakEarly: false,\n        i: 0\n    };\n    console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\n    for(let i1 = 0; i1 < signedTxns.length; i1++){\n        const signedTxnPromise = sendSignedTransaction({\n            connection,\n            signedTransaction: signedTxns[i1]\n        });\n        signedTxnPromise.then(({ txid , slot  })=>{\n            successCallback(txid, i1);\n        }).catch((reason)=>{\n            // @ts-ignore\n            failCallback(signedTxns[i1], i1);\n            if (sequenceType === SequenceType.StopOnFailure) {\n                breakEarlyObject.breakEarly = true;\n                breakEarlyObject.i = i1;\n            }\n        });\n        if (sequenceType !== SequenceType.Parallel) {\n            try {\n                await signedTxnPromise;\n            } catch (e) {\n                console.log('Caught failure', e);\n                if (breakEarlyObject.breakEarly) {\n                    console.log('Died on ', breakEarlyObject.i);\n                    // Return the txn we failed on by index\n                    return {\n                        number: breakEarlyObject.i,\n                        txs: await Promise.all(pendingTxns)\n                    };\n                }\n            }\n        } else {\n            pendingTxns.push(signedTxnPromise);\n        }\n    }\n    if (sequenceType !== SequenceType.Parallel) {\n        await Promise.all(pendingTxns);\n    }\n    return {\n        number: signedTxns.length,\n        txs: await Promise.all(pendingTxns)\n    };\n};\nconst sendTransaction = async (connection, wallet, instructions, signers, awaitConfirmation = true, commitment = 'singleGossip', includesFeePayer = false, block)=>{\n    if (!wallet.publicKey) throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__.WalletNotConnectedError();\n    let transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n    instructions.forEach((instruction)=>transaction.add(instruction)\n    );\n    transaction.recentBlockhash = (block || await connection.getRecentBlockhash(commitment)).blockhash;\n    if (includesFeePayer) {\n        transaction.setSigners(...signers.map((s)=>s.publicKey\n        ));\n    } else {\n        transaction.setSigners(// fee payed by the wallet owner\n        wallet.publicKey, ...signers.map((s)=>s.publicKey\n        ));\n    }\n    if (signers.length > 0) {\n        transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n        transaction = await wallet.signTransaction(transaction);\n    }\n    const rawTransaction = transaction.serialize();\n    let options = {\n        skipPreflight: true,\n        commitment\n    };\n    const txid = await connection.sendRawTransaction(rawTransaction, options);\n    let slot = 0;\n    if (awaitConfirmation) {\n        const confirmation = await awaitTransactionSignatureConfirmation(txid, DEFAULT_TIMEOUT, connection, commitment);\n        if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction');\n        slot = confirmation?.slot || 0;\n        if (confirmation?.err) {\n            const errors = await getErrorForTransaction(connection, txid);\n            console.log(errors);\n            throw new Error(`Raw transaction ${txid} failed`);\n        }\n    }\n    return {\n        txid,\n        slot\n    };\n};\nconst sendTransactionWithRetry = async (connection, wallet, instructions, signers, commitment = 'singleGossip', includesFeePayer = false, block, beforeSend)=>{\n    if (!wallet.publicKey) throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__.WalletNotConnectedError();\n    let transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n    instructions.forEach((instruction)=>transaction.add(instruction)\n    );\n    transaction.recentBlockhash = (block || await connection.getRecentBlockhash(commitment)).blockhash;\n    if (includesFeePayer) {\n        transaction.setSigners(...signers.map((s)=>s.publicKey\n        ));\n    } else {\n        transaction.setSigners(// fee payed by the wallet owner\n        wallet.publicKey, ...signers.map((s)=>s.publicKey\n        ));\n    }\n    if (signers.length > 0) {\n        transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n        transaction = await wallet.signTransaction(transaction);\n    }\n    if (beforeSend) {\n        beforeSend();\n    }\n    const { txid , slot  } = await sendSignedTransaction({\n        connection,\n        signedTransaction: transaction\n    });\n    return {\n        txid,\n        slot\n    };\n};\nconst getUnixTs = ()=>{\n    return new Date().getTime() / 1000;\n};\nconst DEFAULT_TIMEOUT = 15000;\nasync function sendSignedTransaction({ signedTransaction , connection , timeout =DEFAULT_TIMEOUT  }) {\n    const rawTransaction = signedTransaction.serialize();\n    const startTime = getUnixTs();\n    let slot = 0;\n    const txid = await connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true\n    });\n    console.log('Started awaiting confirmation for', txid);\n    let done = false;\n    (async ()=>{\n        while(!done && getUnixTs() - startTime < timeout){\n            connection.sendRawTransaction(rawTransaction, {\n                skipPreflight: true\n            });\n            await sleep(500);\n        }\n    })();\n    try {\n        const confirmation = await awaitTransactionSignatureConfirmation(txid, timeout, connection, 'recent', true);\n        if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction');\n        if (confirmation.err) {\n            console.error(confirmation.err);\n            throw new Error('Transaction failed: Custom instruction error');\n        }\n        slot = confirmation?.slot || 0;\n    } catch (err) {\n        console.error('Timeout Error caught', err);\n        if (err.timeout) {\n            throw new Error('Timed out awaiting confirmation on transaction');\n        }\n        let simulateResult = null;\n        try {\n            simulateResult = (await simulateTransaction(connection, signedTransaction, 'single')).value;\n        } catch (e) {}\n        if (simulateResult && simulateResult.err) {\n            if (simulateResult.logs) {\n                for(let i = simulateResult.logs.length - 1; i >= 0; --i){\n                    const line = simulateResult.logs[i];\n                    if (line.startsWith('Program log: ')) {\n                        throw new Error('Transaction failed: ' + line.slice('Program log: '.length));\n                    }\n                }\n            }\n            throw new Error(JSON.stringify(simulateResult.err));\n        }\n    // throw new Error('Transaction failed');\n    } finally{\n        done = true;\n    }\n    console.log('Latency', txid, getUnixTs() - startTime);\n    return {\n        txid,\n        slot\n    };\n}\nasync function simulateTransaction(connection, transaction, commitment) {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(// @ts-ignore\n    connection._disableBlockhashCaching);\n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n        encoding: 'base64',\n        commitment\n    };\n    const args = [\n        encodedTransaction,\n        config\n    ];\n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n}\nasync function awaitTransactionSignatureConfirmation(txid, timeout, connection, commitment = 'recent', queryStatus = false) {\n    let done = false;\n    let status = {\n        slot: 0,\n        confirmations: 0,\n        err: null\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject)=>{\n        setTimeout(()=>{\n            if (done) {\n                return;\n            }\n            done = true;\n            console.log('Rejecting for timeout...');\n            reject({\n                timeout: true\n            });\n        }, timeout);\n        try {\n            subId = connection.onSignature(txid, (result, context)=>{\n                done = true;\n                status = {\n                    err: result.err,\n                    slot: context.slot,\n                    confirmations: 0\n                };\n                if (result.err) {\n                    console.log('Rejected via websocket', result.err);\n                    reject(status);\n                } else {\n                    console.log('Resolved via websocket', result);\n                    resolve(status);\n                }\n            }, commitment);\n        } catch (e1) {\n            done = true;\n            console.error('WS error in setup', txid, e1);\n        }\n        while(!done && queryStatus){\n            // eslint-disable-next-line no-loop-func\n            (async ()=>{\n                try {\n                    const signatureStatuses = await connection.getSignatureStatuses([\n                        txid, \n                    ]);\n                    status = signatureStatuses && signatureStatuses.value[0];\n                    if (!done) {\n                        if (!status) {\n                            console.log('REST null result for', txid, status);\n                        } else if (status.err) {\n                            console.log('REST error for', txid, status);\n                            done = true;\n                            reject(status.err);\n                        } else if (!status.confirmations) {\n                            console.log('REST no confirmations for', txid, status);\n                        } else {\n                            console.log('REST confirmation for', txid, status);\n                            done = true;\n                            resolve(status);\n                        }\n                    }\n                } catch (e) {\n                    if (!done) {\n                        console.log('REST connection error: txid', txid, e);\n                    }\n                }\n            })();\n            await sleep(2000);\n        }\n    });\n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId]) connection.removeSignatureListener(subId);\n    done = true;\n    console.log('Returning status', status);\n    return status;\n}\nfunction sleep(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms)\n    );\n}\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/connection.tsx\n");

/***/ }),

/***/ "./components/utils.ts":
/*!*****************************!*\
  !*** ./components/utils.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toDate\": () => (/* binding */ toDate),\n/* harmony export */   \"formatNumber\": () => (/* binding */ formatNumber),\n/* harmony export */   \"SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\": () => (/* binding */ SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID),\n/* harmony export */   \"CIVIC\": () => (/* binding */ CIVIC),\n/* harmony export */   \"getAtaForMint\": () => (/* binding */ getAtaForMint),\n/* harmony export */   \"getNetworkExpire\": () => (/* binding */ getNetworkExpire),\n/* harmony export */   \"getNetworkToken\": () => (/* binding */ getNetworkToken),\n/* harmony export */   \"createAssociatedTokenAccountInstruction\": () => (/* binding */ createAssociatedTokenAccountInstruction)\n/* harmony export */ });\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @project-serum/anchor */ \"@project-serum/anchor\");\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/spl-token */ \"@solana/spl-token\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_solana_web3_js__WEBPACK_IMPORTED_MODULE_2__);\n/* this component defines various functions required by the candy-machine.ts component to send instructions\nto the smart contract - copied from metaplex */ \n\n\n\nconst toDate = (value)=>{\n    if (!value) {\n        return;\n    }\n    return new Date(value.toNumber() * 1000);\n};\nconst numberFormater = new Intl.NumberFormat('en-US', {\n    style: 'decimal',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n});\nconst formatNumber = {\n    format: (val)=>{\n        if (!val) {\n            return '--';\n        }\n        return numberFormater.format(val);\n    },\n    asNumber: (val)=>{\n        if (!val) {\n            return undefined;\n        }\n        return val.toNumber() / _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.LAMPORTS_PER_SOL;\n    }\n};\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\nconst CIVIC = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey('gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs');\nconst getAtaForMint = async (mint, buyer)=>{\n    return await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        buyer.toBuffer(),\n        _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID.toBuffer(),\n        mint.toBuffer()\n    ], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID);\n};\nconst getNetworkExpire = async (gatekeeperNetwork)=>{\n    return await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        gatekeeperNetwork.toBuffer(),\n        Buffer.from('expire')\n    ], CIVIC);\n};\nconst getNetworkToken = async (wallet, gatekeeperNetwork)=>{\n    return await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        wallet.toBuffer(),\n        Buffer.from('gateway'),\n        Buffer.from([\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ]),\n        gatekeeperNetwork.toBuffer(), \n    ], CIVIC);\n};\nfunction createAssociatedTokenAccountInstruction(associatedTokenAddress, payer, walletAddress, splTokenMintAddress) {\n    const keys = [\n        {\n            pubkey: payer,\n            isSigner: true,\n            isWritable: true\n        },\n        {\n            pubkey: associatedTokenAddress,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: walletAddress,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: splTokenMintAddress,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.SystemProgram.programId,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false\n        }, \n    ];\n    return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.TransactionInstruction({\n        keys,\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([])\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/utils.ts\n");

/***/ }),

/***/ "./pages/readNFT.tsx":
/*!***************************!*\
  !*** ./pages/readNFT.tsx ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_wallet_adapter_react_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/wallet-adapter-react-ui */ \"@solana/wallet-adapter-react-ui\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _styles_Home_module_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../styles/Home.module.css */ \"./styles/Home.module.css\");\n/* harmony import */ var _styles_Home_module_css__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var react_unity_webgl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-unity-webgl */ \"react-unity-webgl\");\n/* harmony import */ var react_unity_webgl__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_unity_webgl__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @project-serum/anchor */ \"@project-serum/anchor\");\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_project_serum_anchor__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"@solana/wallet-adapter-react\");\n/* harmony import */ var _components_candy_machine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/candy-machine */ \"./components/candy-machine.ts\");\n/* harmony import */ var _nfteyez_sol_rayz__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @nfteyez/sol-rayz */ \"@nfteyez/sol-rayz\");\n/* harmony import */ var _nfteyez_sol_rayz__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_nfteyez_sol_rayz__WEBPACK_IMPORTED_MODULE_8__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_solana_wallet_adapter_react_ui__WEBPACK_IMPORTED_MODULE_1__, _components_candy_machine__WEBPACK_IMPORTED_MODULE_7__, _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_6__]);\n([_solana_wallet_adapter_react_ui__WEBPACK_IMPORTED_MODULE_1__, _components_candy_machine__WEBPACK_IMPORTED_MODULE_7__, _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__);\n\n\n\n\n\n/*import styled from 'styled-components';*/ \n\n\n\n\n\nvar unityContext = new react_unity_webgl__WEBPACK_IMPORTED_MODULE_4__.UnityContext({\n    loaderUrl: \"unitybuild/AnotherTestApp.loader.js\",\n    dataUrl: \"unitybuild/AnotherTestApp.data\",\n    frameworkUrl: \"unitybuild/AnotherTestApp.framework.js\",\n    codeUrl: \"unitybuild/AnotherTestApp.wasm\"\n});\n// set the host to Devnet\nconst rpcHost = 'https://api.devnet.solana.com';\n// establish a new connection to the solana devnet\nconst connection = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_5__.web3.Connection(rpcHost ? rpcHost : _project_serum_anchor__WEBPACK_IMPORTED_MODULE_5__.web3.clusterApiUrl('devnet'));\n/* This function returns the layout of the hompage, including two buttons to connect and disconnect the wallet*/ const readNFT = ()=>{\n    // call to useWallet function to get the info about connected wallet, like the public key\n    const wallet = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_6__.useWallet)();\n    const anchorWallet = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n            console.log(\"Wallet Not Connected\");\n            return;\n        }\n        return {\n            publicKey: wallet.publicKey,\n            signAllTransactions: wallet.signAllTransactions,\n            signTransaction: wallet.signTransaction\n        };\n    }, [\n        wallet\n    ]);\n    //function declaration -> the setCandyMachine function determines the candyMachine variable\n    const { 0: candyMachine , 1: setCandyMachine  } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)();\n    // takes the wallet variable initialised above and creates an anchorWallet i.e. a Wallet usable by Anchor client\n    const Mint = async ()=>{\n        // turnes the public key string below into a public key object (required for the next functions)\n        const getCandyMachineId = ()=>{\n            try {\n                const candyMachineId = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_5__.web3.PublicKey(\"8aYkMCQRGWdHos3SiDBN5KX8pWZU5uUqVjdVZ4GxvFkY\");\n                return candyMachineId; // returns the candyMachineID\n            } catch (e) {\n                console.log('Failed to construct CandyMachineId', e);\n                return undefined;\n            }\n        };\n        // calls the above function to construct the public key object\n        const candyMachineId1 = getCandyMachineId();\n        // gets the state of the candy machine on the blockchain and stores this with setCandyMachine \n        // in the candyMachine variable declared above\n        if (anchorWallet && candyMachineId1) {\n            const cndy = await (0,_components_candy_machine__WEBPACK_IMPORTED_MODULE_7__.getCandyMachineState)(anchorWallet, candyMachineId1, connection);\n            setCandyMachine(cndy);\n        }\n        // if the wallet is connected and both the candyMachine and wallet PubKey are not NULL, then mint\n        // using the candy machine stored in the candyMachine variable and the wallet Public key of the user\n        if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n            await (0,_components_candy_machine__WEBPACK_IMPORTED_MODULE_7__.mintOneToken)(candyMachine, wallet.publicKey);\n            console.log(\"minted\");\n            send(\"minted Spaceman\");\n        }\n    };\n    // Initialise values\n    const { 0: image , 1: setImage  } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)();\n    const { 0: userGameNFTArray , 1: setUserGameNFTArray  } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)([]);\n    let name = \"\";\n    let name2 = \"\";\n    let nameArray = new Array;\n    let data;\n    /* ---------------  Read NFT Data if Wallet is connected --------------- */ if (wallet.connected && wallet.publicKey) {\n        // create an array where to insert relevant NFTs (with right creator ID)\n        let tempGameNFTArray = new Array;\n        const creator_id = 'AVabPm3PB7JxaNND5UKJRXQh4XRY4Mwjkg2nGAEG3TGn';\n        data = async ()=>{\n            const queryResult = await (0,_nfteyez_sol_rayz__WEBPACK_IMPORTED_MODULE_8__.getParsedNftAccountsByOwner)({\n                publicAddress: wallet.publicKey,\n                connection: connection\n            });\n            // Check if Wallet contains any NFTs\n            if (queryResult == null) {\n                return null;\n            }\n            // Iterating through Wallet\n            let queryLength = queryResult.length;\n            for(let i = 0; i < queryLength; i++){\n                console.log(i);\n                // Skip irrelevant NFTs\n                /* if (queryResult[i].data.creators[i].address != creator_id){\n          continue;\n        } */ // Collecting relevant NFT instance\n                let gameNFT = {\n                    \"name\": queryResult[i].data.name,\n                    \"uri\": queryResult[i].data.uri,\n                    \"mint\": queryResult[i].mint\n                };\n                tempGameNFTArray[i] = gameNFT;\n                console.log(\"Name of found relevant NFT:\");\n                console.log(tempGameNFTArray[i].name);\n                // This part just shows the image:\n                /* async function getImage() {\n          try {\n            let response = await fetch(nft_data[0].data.uri);\n            let responseJson = await response.json();\n            return responseJson.image; // image is a category\n          } catch(error) {\n            console.error(error);\n          }\n        }\n        //setImage(await getImage()); */ send(queryResult[i].data.name.toString());\n            }\n            // Transfer information to userGameNFTArray\n            setUserGameNFTArray(tempGameNFTArray);\n            return queryResult;\n        };\n        console.log(\"We are outside of Asynch Function\");\n        // Populate Name Array to print names of relevant NFTs\n        for(let i1 = 0; i1 < userGameNFTArray.length; i1++){\n            console.log(userGameNFTArray[i1]);\n            nameArray[i1] = JSON.stringify(userGameNFTArray[i1].name);\n        }\n    } else {\n        data = null;\n        console.log(\"Wallet not connected!\");\n    }\n    /* ------------------------------ MARKUS ------------------------------ */ // Creating the Unity Context Instance\n    // https://github.com/jeffreylanters/react-unity-webgl/discussions/242\n    /*const [unityContext, setUnity] = useState<UnityContext>()\n  useEffect(() => {\n    var new_untiy_context = new UnityContext({\n      loaderUrl: \"unitybuild/AnotherTestApp.loader.js\",\n      dataUrl: \"unitybuild/AnotherTestApp.data\",\n      frameworkUrl: \"unitybuild/AnotherTestApp.framework.js\",\n      codeUrl: \"unitybuild/AnotherTestApp.wasm\",\n      });\n    setUnity(new_untiy_context);\n  },[]);\n  */ /*\n  const getBalance = async() => {\n    if(wallet.publicKey){\n      const candy = new anchor.web3.PublicKey(\n        \"8aYkMCQRGWdHos3SiDBN5KX8pWZU5uUqVjdVZ4GxvFkY\"\n      var balance = await connection.getTokenAccountsByOwner(wallet.publicKey, Mint: candy)\n      send(balance.value.amount.toString())\n    }\n  }*/ // Full screen handler\n    function handleOnClickFullscreen() {\n        if (unityContext) unityContext.setFullscreen(true);\n    }\n    var msg = \"no wallet detected\";\n    if (wallet.connected && wallet.publicKey != null) {\n        msg = wallet.publicKey?.toBase58();\n    }\n    //send message\n    function send(message) {\n        console.log(\"function called\");\n        console.log(\"message is:\", message);\n        message = \"Message is: \" + message;\n        unityContext.send(\"datareadcontroller\", \"GetNFTData\", message);\n    }\n    // Event Listener for Mint Event\n    if (unityContext) {\n        unityContext.on(\"Mint\", async ()=>{\n            const result = await Mint();\n        });\n    }\n    /* ------------------------------ MARKUS ------------------------------ */ return(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_3___default()), {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                    children: \"NFT Games\"\n                }, void 0, false, {\n                    fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                    lineNumber: 257,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                lineNumber: 256,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_9___default().title),\n                children: \"NFT Games\"\n            }, void 0, false, {\n                fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                lineNumber: 259,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_9___default().main),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                src: image\n                            }, void 0, false, {\n                                fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                                lineNumber: 262,\n                                columnNumber: 9\n                            }, undefined),\n                            \"Array: \",\n                            nameArray\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                        lineNumber: 261,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_9___default().walletButtons),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_solana_wallet_adapter_react_ui__WEBPACK_IMPORTED_MODULE_1__.WalletMultiButton, {}, void 0, false, {\n                                fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                                lineNumber: 267,\n                                columnNumber: 10\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_solana_wallet_adapter_react_ui__WEBPACK_IMPORTED_MODULE_1__.WalletDisconnectButton, {}, void 0, false, {\n                                fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                                lineNumber: 268,\n                                columnNumber: 10\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>{\n                                    send(msg);\n                                },\n                                children: \" send msg\"\n                            }, void 0, false, {\n                                fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                                lineNumber: 269,\n                                columnNumber: 10\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: handleOnClickFullscreen,\n                                children: \" fullscreen \"\n                            }, void 0, false, {\n                                fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                                lineNumber: 270,\n                                columnNumber: 10\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: data,\n                                children: \" NFTData \"\n                            }, void 0, false, {\n                                fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                                lineNumber: 271,\n                                columnNumber: 10\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                        lineNumber: 266,\n                        columnNumber: 8\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((react_unity_webgl__WEBPACK_IMPORTED_MODULE_4___default()), {\n                        unityContext: unityContext,\n                        style: {\n                            height: \"10%\",\n                            width: 950,\n                            border: \"2px solid black\",\n                            background: \"grey\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                        lineNumber: 274,\n                        columnNumber: 8\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n                lineNumber: 260,\n                columnNumber: 6\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/markusjungnickel/Desktop/Local_Solana/UI/reactapp/pages/readNFT.tsx\",\n        lineNumber: 255,\n        columnNumber: 5\n    }, undefined));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (readNFT);\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/readNFT.tsx\n");

/***/ }),

/***/ "@nfteyez/sol-rayz":
/*!************************************!*\
  !*** external "@nfteyez/sol-rayz" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@nfteyez/sol-rayz");

/***/ }),

/***/ "@project-serum/anchor":
/*!****************************************!*\
  !*** external "@project-serum/anchor" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@project-serum/anchor");

/***/ }),

/***/ "@solana/spl-token":
/*!************************************!*\
  !*** external "@solana/spl-token" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@solana/spl-token");

/***/ }),

/***/ "@solana/web3.js":
/*!**********************************!*\
  !*** external "@solana/web3.js" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@solana/web3.js");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/head");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react-unity-webgl":
/*!************************************!*\
  !*** external "react-unity-webgl" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-unity-webgl");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "@solana/wallet-adapter-base":
/*!**********************************************!*\
  !*** external "@solana/wallet-adapter-base" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@solana/wallet-adapter-base");;

/***/ }),

/***/ "@solana/wallet-adapter-react":
/*!***********************************************!*\
  !*** external "@solana/wallet-adapter-react" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@solana/wallet-adapter-react");;

/***/ }),

/***/ "@solana/wallet-adapter-react-ui":
/*!**************************************************!*\
  !*** external "@solana/wallet-adapter-react-ui" ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@solana/wallet-adapter-react-ui");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/readNFT.tsx"));
module.exports = __webpack_exports__;

})();