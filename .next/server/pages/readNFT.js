"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/readNFT";
exports.ids = ["pages/readNFT"];
exports.modules = {

/***/ "./components/types.ts":
/*!*****************************!*\
  !*** ./components/types.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Creator\": () => (/* binding */ Creator),\n/* harmony export */   \"MetadataKey\": () => (/* binding */ MetadataKey),\n/* harmony export */   \"Data\": () => (/* binding */ Data),\n/* harmony export */   \"Metadata\": () => (/* binding */ Metadata),\n/* harmony export */   \"METADATA_SCHEMA\": () => (/* binding */ METADATA_SCHEMA)\n/* harmony export */ });\nclass Creator {\n    constructor(args){\n        this.address = args.address;\n        this.verified = args.verified;\n        this.share = args.share;\n    }\n}\nvar MetadataKey;\n(function(MetadataKey) {\n    MetadataKey[MetadataKey[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    MetadataKey[MetadataKey[\"MetadataV1\"] = 4] = \"MetadataV1\";\n    MetadataKey[MetadataKey[\"EditionV1\"] = 1] = \"EditionV1\";\n    MetadataKey[MetadataKey[\"MasterEditionV1\"] = 2] = \"MasterEditionV1\";\n    MetadataKey[MetadataKey[\"MasterEditionV2\"] = 6] = \"MasterEditionV2\";\n    MetadataKey[MetadataKey[\"EditionMarker\"] = 7] = \"EditionMarker\";\n})(MetadataKey || (MetadataKey = {}));\nclass Data {\n    constructor(args){\n        this.name = args.name;\n        this.symbol = args.symbol;\n        this.uri = args.uri;\n        this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n        this.creators = args.creators;\n    }\n}\nclass Metadata {\n    constructor(args){\n        this.key = MetadataKey.MetadataV1;\n        this.updateAuthority = args.updateAuthority;\n        this.mint = args.mint;\n        this.data = args.data;\n        this.primarySaleHappened = args.primarySaleHappened;\n        this.isMutable = args.isMutable;\n    }\n}\nconst METADATA_SCHEMA = new Map([\n    [\n        Data,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"name\",\n                    \"string\"\n                ],\n                [\n                    \"symbol\",\n                    \"string\"\n                ],\n                [\n                    \"uri\",\n                    \"string\"\n                ],\n                [\n                    \"sellerFeeBasisPoints\",\n                    \"u16\"\n                ],\n                [\n                    \"creators\",\n                    {\n                        kind: \"option\",\n                        type: [\n                            Creator\n                        ]\n                    }\n                ], \n            ]\n        }, \n    ],\n    [\n        Creator,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"address\",\n                    [\n                        32\n                    ]\n                ],\n                [\n                    \"verified\",\n                    \"u8\"\n                ],\n                [\n                    \"share\",\n                    \"u8\"\n                ], \n            ]\n        }, \n    ],\n    [\n        Metadata,\n        {\n            kind: \"struct\",\n            fields: [\n                [\n                    \"key\",\n                    \"u8\"\n                ],\n                [\n                    \"updateAuthority\",\n                    [\n                        32\n                    ]\n                ],\n                [\n                    \"mint\",\n                    [\n                        32\n                    ]\n                ],\n                [\n                    \"data\",\n                    Data\n                ],\n                [\n                    \"primarySaleHappened\",\n                    \"u8\"\n                ],\n                [\n                    \"isMutable\",\n                    \"u8\"\n                ], \n            ]\n        }, \n    ], \n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LDBCQUFFO29CQUFBLENBQUM7Z0JBQUEsQ0FBQztnQkFDakIsQ0FBQztvQkFBQSxDQUFVO29CQUFFLENBQUk7Z0JBQUEsQ0FBQztnQkFDbEIsQ0FBQztvQkFBQSxDQUFPO29CQUFFLENBQUk7Z0JBQUEsQ0FBQztZQUNqQixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFDRCxDQUFDO1FBQ0NWLFFBQVE7UUFDUixDQUFDO1lBQ0NTLElBQUksRUFBRSxDQUFRO1lBQ2RDLE1BQU0sRUFBRSxDQUFDO2dCQUNQLENBQUM7b0JBQUEsQ0FBSztvQkFBRSxDQUFJO2dCQUFBLENBQUM7Z0JBQ2IsQ0FBQztvQkFBQSxDQUFpQjtvQkFBRSxDQUFDO0FBQUEsMEJBQUU7b0JBQUEsQ0FBQztnQkFBQSxDQUFDO2dCQUN6QixDQUFDO29CQUFBLENBQU07b0JBQUUsQ0FBQztBQUFBLDBCQUFFO29CQUFBLENBQUM7Z0JBQUEsQ0FBQztnQkFDZCxDQUFDO29CQUFBLENBQU07b0JBQUVoQixJQUFJO2dCQUFBLENBQUM7Z0JBQ2QsQ0FBQztvQkFBQSxDQUFxQjtvQkFBRSxDQUFJO2dCQUFBLENBQUM7Z0JBQzdCLENBQUM7b0JBQUEsQ0FBVztvQkFBRSxDQUFJO2dCQUFBLENBQUM7WUFDckIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rlc3QxLy4vY29tcG9uZW50cy90eXBlcy50cz9hZjM2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY291bnRJbmZvLCBQdWJsaWNLZXkgfSBmcm9tIFwiQHNvbGFuYS93ZWIzLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBDcmVhdG9yIHtcbiAgYWRkcmVzczogUHVibGljS2V5O1xuICB2ZXJpZmllZDogYm9vbGVhbjtcbiAgc2hhcmU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihhcmdzOiB7IGFkZHJlc3M6IFB1YmxpY0tleTsgdmVyaWZpZWQ6IGJvb2xlYW47IHNoYXJlOiBudW1iZXIgfSkge1xuICAgIHRoaXMuYWRkcmVzcyA9IGFyZ3MuYWRkcmVzcztcbiAgICB0aGlzLnZlcmlmaWVkID0gYXJncy52ZXJpZmllZDtcbiAgICB0aGlzLnNoYXJlID0gYXJncy5zaGFyZTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBBY2NvdW50QW5kUHVia2V5ID0ge1xuICBwdWJrZXk6IHN0cmluZztcbiAgYWNjb3VudDogQWNjb3VudEluZm88QnVmZmVyPjtcbn07XG5cbmV4cG9ydCBlbnVtIE1ldGFkYXRhS2V5IHtcbiAgVW5pbml0aWFsaXplZCA9IDAsXG4gIE1ldGFkYXRhVjEgPSA0LFxuICBFZGl0aW9uVjEgPSAxLFxuICBNYXN0ZXJFZGl0aW9uVjEgPSAyLFxuICBNYXN0ZXJFZGl0aW9uVjIgPSA2LFxuICBFZGl0aW9uTWFya2VyID0gNyxcbn1cblxuZXhwb3J0IGNsYXNzIERhdGEge1xuICBuYW1lOiBzdHJpbmc7XG4gIHN5bWJvbDogc3RyaW5nO1xuICB1cmk6IHN0cmluZztcbiAgc2VsbGVyRmVlQmFzaXNQb2ludHM6IG51bWJlcjtcbiAgY3JlYXRvcnM6IENyZWF0b3JbXSB8IG51bGw7XG4gIGNvbnN0cnVjdG9yKGFyZ3M6IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgc3ltYm9sOiBzdHJpbmc7XG4gICAgdXJpOiBzdHJpbmc7XG4gICAgc2VsbGVyRmVlQmFzaXNQb2ludHM6IG51bWJlcjtcbiAgICBjcmVhdG9yczogQ3JlYXRvcltdIHwgbnVsbDtcbiAgfSkge1xuICAgIHRoaXMubmFtZSA9IGFyZ3MubmFtZTtcbiAgICB0aGlzLnN5bWJvbCA9IGFyZ3Muc3ltYm9sO1xuICAgIHRoaXMudXJpID0gYXJncy51cmk7XG4gICAgdGhpcy5zZWxsZXJGZWVCYXNpc1BvaW50cyA9IGFyZ3Muc2VsbGVyRmVlQmFzaXNQb2ludHM7XG4gICAgdGhpcy5jcmVhdG9ycyA9IGFyZ3MuY3JlYXRvcnM7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1ldGFkYXRhIHtcbiAga2V5OiBNZXRhZGF0YUtleTtcbiAgdXBkYXRlQXV0aG9yaXR5OiBQdWJsaWNLZXk7XG4gIG1pbnQ6IFB1YmxpY0tleTtcbiAgZGF0YTogRGF0YTtcbiAgcHJpbWFyeVNhbGVIYXBwZW5lZDogYm9vbGVhbjtcbiAgaXNNdXRhYmxlOiBib29sZWFuO1xuICBtYXN0ZXJFZGl0aW9uPzogUHVibGljS2V5O1xuICBlZGl0aW9uPzogUHVibGljS2V5O1xuICBjb25zdHJ1Y3RvcihhcmdzOiB7XG4gICAgdXBkYXRlQXV0aG9yaXR5OiBQdWJsaWNLZXk7XG4gICAgbWludDogUHVibGljS2V5O1xuICAgIGRhdGE6IERhdGE7XG4gICAgcHJpbWFyeVNhbGVIYXBwZW5lZDogYm9vbGVhbjtcbiAgICBpc011dGFibGU6IGJvb2xlYW47XG4gICAgbWFzdGVyRWRpdGlvbj86IFB1YmxpY0tleTtcbiAgfSkge1xuICAgIHRoaXMua2V5ID0gTWV0YWRhdGFLZXkuTWV0YWRhdGFWMTtcbiAgICB0aGlzLnVwZGF0ZUF1dGhvcml0eSA9IGFyZ3MudXBkYXRlQXV0aG9yaXR5O1xuICAgIHRoaXMubWludCA9IGFyZ3MubWludDtcbiAgICB0aGlzLmRhdGEgPSBhcmdzLmRhdGE7XG4gICAgdGhpcy5wcmltYXJ5U2FsZUhhcHBlbmVkID0gYXJncy5wcmltYXJ5U2FsZUhhcHBlbmVkO1xuICAgIHRoaXMuaXNNdXRhYmxlID0gYXJncy5pc011dGFibGU7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IE1FVEFEQVRBX1NDSEVNQSA9IG5ldyBNYXA8YW55LCBhbnk+KFtcbiAgW1xuICAgIERhdGEsXG4gICAge1xuICAgICAga2luZDogXCJzdHJ1Y3RcIixcbiAgICAgIGZpZWxkczogW1xuICAgICAgICBbXCJuYW1lXCIsIFwic3RyaW5nXCJdLFxuICAgICAgICBbXCJzeW1ib2xcIiwgXCJzdHJpbmdcIl0sXG4gICAgICAgIFtcInVyaVwiLCBcInN0cmluZ1wiXSxcbiAgICAgICAgW1wic2VsbGVyRmVlQmFzaXNQb2ludHNcIiwgXCJ1MTZcIl0sXG4gICAgICAgIFtcImNyZWF0b3JzXCIsIHsga2luZDogXCJvcHRpb25cIiwgdHlwZTogW0NyZWF0b3JdIH1dLFxuICAgICAgXSxcbiAgICB9LFxuICBdLFxuICBbXG4gICAgQ3JlYXRvcixcbiAgICB7XG4gICAgICBraW5kOiBcInN0cnVjdFwiLFxuICAgICAgZmllbGRzOiBbXG4gICAgICAgIFtcImFkZHJlc3NcIiwgWzMyXV0sXG4gICAgICAgIFtcInZlcmlmaWVkXCIsIFwidThcIl0sXG4gICAgICAgIFtcInNoYXJlXCIsIFwidThcIl0sXG4gICAgICBdLFxuICAgIH0sXG4gIF0sXG4gIFtcbiAgICBNZXRhZGF0YSxcbiAgICB7XG4gICAgICBraW5kOiBcInN0cnVjdFwiLFxuICAgICAgZmllbGRzOiBbXG4gICAgICAgIFtcImtleVwiLCBcInU4XCJdLFxuICAgICAgICBbXCJ1cGRhdGVBdXRob3JpdHlcIiwgWzMyXV0sXG4gICAgICAgIFtcIm1pbnRcIiwgWzMyXV0sXG4gICAgICAgIFtcImRhdGFcIiwgRGF0YV0sXG4gICAgICAgIFtcInByaW1hcnlTYWxlSGFwcGVuZWRcIiwgXCJ1OFwiXSxcbiAgICAgICAgW1wiaXNNdXRhYmxlXCIsIFwidThcIl0sXG4gICAgICBdLFxuICAgIH0sXG4gIF0sXG5dKTtcbiJdLCJuYW1lcyI6WyJDcmVhdG9yIiwiYXJncyIsImFkZHJlc3MiLCJ2ZXJpZmllZCIsInNoYXJlIiwiTWV0YWRhdGFLZXkiLCJVbmluaXRpYWxpemVkIiwiTWV0YWRhdGFWMSIsIkVkaXRpb25WMSIsIk1hc3RlckVkaXRpb25WMSIsIk1hc3RlckVkaXRpb25WMiIsIkVkaXRpb25NYXJrZXIiLCJEYXRhIiwibmFtZSIsInN5bWJvbCIsInVyaSIsInNlbGxlckZlZUJhc2lzUG9pbnRzIiwiY3JlYXRvcnMiLCJNZXRhZGF0YSIsImtleSIsInVwZGF0ZUF1dGhvcml0eSIsIm1pbnQiLCJkYXRhIiwicHJpbWFyeVNhbGVIYXBwZW5lZCIsImlzTXV0YWJsZSIsIk1FVEFEQVRBX1NDSEVNQSIsIk1hcCIsImtpbmQiLCJmaWVsZHMiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/types.ts\n");

/***/ }),

/***/ "./components/wallet.ts":
/*!******************************!*\
  !*** ./components/wallet.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fetchWalletForNFTs\": () => (/* binding */ fetchWalletForNFTs),\n/* harmony export */   \"getTransactionData\": () => (/* binding */ getTransactionData),\n/* harmony export */   \"parseTransactionData\": () => (/* binding */ parseTransactionData),\n/* harmony export */   \"saveDump\": () => (/* binding */ saveDump),\n/* harmony export */   \"loadDump\": () => (/* binding */ loadDump),\n/* harmony export */   \"getDumpPath\": () => (/* binding */ getDumpPath)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! borsh */ \"borsh\");\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(borsh__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types */ \"./components/types.ts\");\n/* harmony import */ var _nfteyez_sol_rayz__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @nfteyez/sol-rayz */ \"@nfteyez/sol-rayz\");\n/* harmony import */ var _nfteyez_sol_rayz__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_nfteyez_sol_rayz__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\nconst SOLANA_MAINNET = \"https://api.devnet.solana.com\";\nconst DUMP_PATH = __dirname + \"/../dumps\";\nconst DEFAULT_SOL = 1000000000;\nconst TOKEN_METADATA_PROGRAM_ID = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\n/**\n * Determine NFTs on wallet\n *\n * Fetch only metadata for each NFT. Price and related transaction info is excepted\n * @param address Wallet address to determine\n * @returns Fetched NFT Accounts with data\n */ const fetchWalletForNFTs = async (address)=>{\n    const wallet = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(address);\n    const connection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(SOLANA_MAINNET, \"confirmed\");\n    const nftAccounts = await (0,_nfteyez_sol_rayz__WEBPACK_IMPORTED_MODULE_6__.getParsedNftAccountsByOwner)({\n        publicAddress: wallet,\n        connection: connection\n    });\n    console.log(`\\n${nftAccounts.length} nfts determined from this wallet`);\n    return nftAccounts;\n};\n/**\n * Fetch price info and related transactions\n *\n * This function load the NFT metadata from dump. If there isn't dump file for this NFT,\n * determine NFTs and then try again\n * @param address The wallet address\n * @param mint The mint address of NFT. To get prices and related transactions for all\n *             NFTs in dump, assign this param as undefined\n * @returns Price info for individual or all nft dumps\n */ async function getTransactionData(address, mint) {\n    const connection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(SOLANA_MAINNET, \"confirmed\");\n    let dumpName = \"\", dumpList = [], result = []; // For return\n    // If mint param is undefined, read all dump files for nfts\n    if (mint == undefined) {\n        dumpList = fs__WEBPACK_IMPORTED_MODULE_2___default().readdirSync(DUMP_PATH);\n        if (dumpList.length == 0) return undefined;\n    } else dumpName = mint;\n    for(let dumpId = 0; mint != undefined || dumpId < dumpList.length; dumpId++){\n        if (mint == undefined) dumpName = dumpList[dumpId];\n        else {\n            if (dumpId != 0) break;\n            dumpName = `${dumpName}.json`;\n        }\n        let dump = loadDump(dumpName);\n        if (!dump) {\n            console.log(\"Couldn't find NFT metadata. Fetch NFTs and try again.\");\n            return false;\n        }\n        let fetchedNFTMetadata = undefined;\n        /*\n      Try to fetch NFT metadata from dump metadata uri\n      Maximum try again is 5. All trying will failed if the metadata uri is invalid\n      */ for(let again = 0; again < 5; again++){\n            try {\n                if (!dump.metadata.data.uri) break;\n                console.log(dump.metadata.data.uri);\n                const nftMetaData = await axios__WEBPACK_IMPORTED_MODULE_4___default().get(dump.metadata.data.uri);\n                if (nftMetaData.status == 200) {\n                    fetchedNFTMetadata = nftMetaData.data;\n                    break;\n                }\n            } catch (e) {\n                console.log(`Metadata fetch from arweave failed. Trying again`);\n            }\n        }\n        // Continue if the metadata uri is exist but is invalid\n        if (!fetchedNFTMetadata && !dump.metadata.data.uri) {\n            console.log(\"Could't get NFT metadata. Fetch NFTs and try again.\");\n            if (mint == undefined) continue;\n            return false;\n        }\n        console.log(\"Get token nft metadata processed\");\n        // Fetch related transactions with this mint address\n        let trxTracks = [];\n        while(1){\n            try {\n                const result = await connection.getSignaturesForAddress(new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(dumpName.split(\".\")[0]), {\n                    limit: 100\n                }, \"confirmed\");\n                trxTracks = result;\n                console.log(\"--> Fetched related signature for address\");\n                break;\n            } catch (e) {\n                console.log(`--> Error while fetch signatures: ${e}`);\n            }\n        }\n        // Try to extract purchase or mint price, and convert transaction time from unix to locale format\n        let trxData = [], purchasedDate = \"\", purchasedPrice = 0;\n        for(let idx = 0; idx < trxTracks.length; idx++){\n            const time = (trxTracks[idx].blockTime ?? 0) * 1000;\n            let date = new Date();\n            date.setTime(time);\n            // Purchased date is the most recent transaction date\n            if (purchasedDate == \"\") purchasedDate = date.toLocaleString();\n            trxData.push({\n                signature: trxTracks[idx].signature,\n                slot: trxTracks[idx].slot,\n                blockTime: date.toLocaleString()\n            });\n            // Extract trade info for this nft\n            const result = await getPriceInfo(trxTracks[idx].signature, address, connection);\n            const price = result == false ? 0 : result;\n            if (purchasedPrice == 0 || purchasedPrice < price) purchasedPrice = price;\n        }\n        console.log(`--> Get purchased Price: ${purchasedPrice}`);\n        // Update dump file for this mint\n        saveDump(dumpName, {\n            ...dump,\n            nftMetadata: fetchedNFTMetadata,\n            purchasedDate,\n            purchasedPrice,\n            transactionData: trxData\n        });\n        let nft = {\n            mint: dump.mint,\n            purchasedPrice,\n            purchasedDate\n        };\n        if (fetchedNFTMetadata) {\n            const project = fetchedNFTMetadata.name.split(\"#\");\n            nft = {\n                ...nft,\n                projectName: project[0],\n                nftNumber: project.length == 1 ? \"\" : `#${project[1]}`,\n                symbol: fetchedNFTMetadata.symbol,\n                family: fetchedNFTMetadata.collection ? fetchedNFTMetadata.collection.family : \"\"\n            };\n        }\n        result.push(nft);\n    }\n    return result;\n}\n/**\n * Get Purchase Price from signature\n * @param sig The signature of trasction\n * @param wallet The address of wallet\n * @param connection The solana web3 connection object\n * @returns The price of purchase or mint as sol\n */ const getPriceInfo = async (sig, wallet, connection)=>{\n    const parsedTrxDatas = await connection.getParsedConfirmedTransaction(sig, \"finalized\");\n    if (parsedTrxDatas == null) return false;\n    let parsedData = parseTransactionData(parsedTrxDatas, sig);\n    let transaferData = [], purchaser = \"\", price = 0;\n    // Find mintAuthority and sol transfer\n    for (const ins of parsedData.transaction.message.instructions){\n        if (ins.program == \"system\" && ins.parsed.type == \"transfer\") {\n            if (ins.parsed.info.lamports % 10000 != 0) continue;\n            transaferData.push(ins.parsed.info);\n        }\n        if (ins.program == \"spl-token\" && ins.parsed.type == \"mintTo\") {\n            purchaser = ins.parsed.info.mintAuthority;\n        }\n    }\n    // Find sol transfer for trade\n    for (const ins1 of parsedData.meta.innerInstructions){\n        for (const innerIns of ins1.instructions){\n            if (innerIns.program == \"system\" && innerIns.parsed.type == \"transfer\") {\n                if (innerIns.parsed.info.lamports % 10000 != 0) continue;\n                transaferData.push(innerIns.parsed.info);\n            }\n        }\n    }\n    // Sum all transfer amount for revenure royalties\n    for (const data of transaferData)if (data.source == wallet || data.source == purchaser) price += data.lamports;\n    console.log(`--> Parsed price: ${purchaser} - ${price / DEFAULT_SOL}`);\n    return price / DEFAULT_SOL;\n};\n/**\n * Convert all PublicKeys in the transactions data as base58 string\n * @param raw Pared transaction data to convert\n * @param sig Will add the signature of this transaction in parsed data struct\n * @returns Formated transaction data\n */ const parseTransactionData = (raw, sig)=>{\n    let parsedData = raw;\n    parsedData.signature = sig;\n    // Parse innerInstruction accounts\n    let newInnerIns = [];\n    for (const innerIns of raw?.meta?.innerInstructions ?? []){\n        let newIns = [];\n        for (const ins of innerIns.instructions){\n            let newData = ins;\n            newData.programId = ins.programId.toBase58();\n            if (newData.accounts) {\n                let newAccounts = [];\n                // Convert innerInstructions account pubkey as string\n                for (const account of newData.accounts)newAccounts.push(account.toBase58());\n                newData.accounts = newAccounts;\n            }\n            newIns.push(newData);\n        }\n        newInnerIns.push({\n            index: innerIns.index,\n            instructions: newIns\n        });\n    }\n    parsedData.meta.innerInstructions = newInnerIns;\n    // Parse transaction accounts\n    let newTransaction = raw?.transaction;\n    let newAccountKeys = [];\n    // Convert transaction account pubkeys as string\n    for (const account of newTransaction?.message.accountKeys ?? [])newAccountKeys.push({\n        ...account,\n        pubkey: account.pubkey.toBase58()\n    });\n    // Convert the account pubkeys in innerInstructions as string\n    let newInstructions = [];\n    for (const ins of newTransaction?.message.instructions){\n        let newIns = ins;\n        if (newIns.accounts) {\n            let newInsAccounts = [];\n            for (const account of newIns.accounts)newInsAccounts.push(account.toBase58());\n            newIns.accounts = newInsAccounts;\n        }\n        newIns.programId = newIns.programId.toBase58();\n        newInstructions.push(newIns);\n    }\n    newTransaction = {\n        ...newTransaction,\n        message: {\n            ...newTransaction.message,\n            instructions: newInstructions,\n            accountKeys: newAccountKeys\n        }\n    };\n    parsedData.transaction = newTransaction;\n    return parsedData;\n};\n// Reduce the zero byte from parsed account metadata and convert creator address as string\nfunction processMetaData(meta) {\n    let bufMeta = meta;\n    bufMeta.updateAuthority = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(meta.updateAuthority).toBase58();\n    bufMeta.mint = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(meta.mint).toBase58();\n    let bufData = meta.data;\n    let sliced_name = Buffer.from(bufData.name);\n    sliced_name = sliced_name.slice(0, sliced_name.indexOf(0));\n    bufData.name = sliced_name.toString();\n    let sliced_symbol = Buffer.from(bufData.symbol);\n    sliced_symbol = sliced_symbol.slice(0, sliced_symbol.indexOf(0));\n    bufData.symbol = sliced_symbol.toString();\n    let sliced_uri = Buffer.from(bufData.uri);\n    sliced_uri = sliced_uri.slice(0, sliced_uri.indexOf(0));\n    bufData.uri = sliced_uri.toString();\n    let creators = [];\n    for (const creator of meta.data.creators ?? []){\n        creators.push({\n            ...creator,\n            address: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(creator.address).toBase58()\n        });\n    }\n    bufData.creators = creators;\n    bufMeta.data = bufData;\n    return bufMeta;\n}\n// Get NFT Token Metadata from mint address\nasync function getAccountsByMint(mint, connection) {\n    const metadataAccounts = await getProgramAccounts(connection, TOKEN_METADATA_PROGRAM_ID.toBase58(), {\n        filters: [\n            {\n                memcmp: {\n                    offset: 1 + 32,\n                    bytes: mint\n                }\n            }, \n        ]\n    });\n    const decodedAccounts = [];\n    for(let i = 0; i < metadataAccounts.length; i++){\n        const e = metadataAccounts[i];\n        const decoded = await decodeMetadata(e.account.data);\n        const accountPubkey = e.pubkey;\n        const store = [\n            decoded,\n            accountPubkey\n        ];\n        decodedAccounts.push(store);\n    }\n    return decodedAccounts;\n}\n// Build the rpcRequest to get program account\nasync function getProgramAccounts(connection, programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    //let encoding;\n    if (configOrCommitment) {\n        if (typeof configOrCommitment === \"string\") {\n            commitment = configOrCommitment;\n        } else {\n            commitment = configOrCommitment.commitment;\n            //encoding = configOrCommitment.encoding;\n            if (configOrCommitment.dataSlice) {\n                extra.dataSlice = configOrCommitment.dataSlice;\n            }\n            if (configOrCommitment.filters) {\n                extra.filters = configOrCommitment.filters;\n            }\n        }\n    }\n    const args = connection._buildArgs([\n        programId\n    ], commitment, \"base64\", extra);\n    const unsafeRes = await connection._rpcRequest(\"getProgramAccounts\", args);\n    const data = unsafeRes.result.map((item)=>{\n        return {\n            account: {\n                // TODO: possible delay parsing could be added here\n                data: Buffer.from(item.account.data[0], \"base64\"),\n                executable: item.account.executable,\n                lamports: item.account.lamports,\n                // TODO: maybe we can do it in lazy way? or just use string\n                owner: item.account.owner\n            },\n            pubkey: item.pubkey\n        };\n    });\n    return data;\n}\n// Decode metadata from buffer with schema\nasync function decodeMetadata(buffer) {\n    return borsh__WEBPACK_IMPORTED_MODULE_1__.deserializeUnchecked(_types__WEBPACK_IMPORTED_MODULE_5__.METADATA_SCHEMA, _types__WEBPACK_IMPORTED_MODULE_5__.Metadata, buffer);\n}\nfunction saveDump(dumpType, content, cPath = DUMP_PATH, infos = {}) {\n    fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(getDumpPath(dumpType, cPath, infos), JSON.stringify(content));\n}\n/**\n * Restore dump content as file\n *\n * @param dumpType Type of dump which is used to resolve dump file name\n * @param cPath Location of saved dump file\n * @returns JSON object or undefined\n */ function loadDump(dumpType, cPath = DUMP_PATH) {\n    const path1 = getDumpPath(dumpType, cPath);\n    return fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(path1) ? JSON.parse(fs__WEBPACK_IMPORTED_MODULE_2___default().readFileSync(path1).toString()) : undefined;\n}\n/**\n * Resolve dump file path from dumpType\n *\n * @param dumpType Type of dump which is used to resolve dump file name\n * @param cPath Location of saved dump file\n * @param infos Optional param for track transactions. Save period info in the dump file name\n * @returns Location of subdirectory of exact dump file\n */ function getDumpPath(dumpType, cPath = DUMP_PATH, infos = {}) {\n    if (!fs__WEBPACK_IMPORTED_MODULE_2___default().existsSync(cPath)) fs__WEBPACK_IMPORTED_MODULE_2___default().mkdirSync(cPath, {\n        recursive: true\n    });\n    switch(dumpType){\n        default:\n            return path__WEBPACK_IMPORTED_MODULE_3___default().join(cPath, dumpType);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/wallet.ts\n");

/***/ }),

/***/ "./pages/readNFT.tsx":
/*!***************************!*\
  !*** ./pages/readNFT.tsx ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"@solana/wallet-adapter-react\");\n/* harmony import */ var _components_wallet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/wallet */ \"./components/wallet.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_1__]);\n_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\n\n\n// import React, { Component, useMemo, useState } from \"react\";\n// import { renderToHTML } from \"next/dist/server/render\";\nconst readNFT = ()=>{\n    const wallet = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_1__.useWallet)();\n    var result;\n    //   const result;\n    if (wallet.connected) {\n        const address = wallet.publicKey;\n        console.log(`Reading from wallet: ${address}`);\n        const readResults = async ()=>{\n            result = await (0,_components_wallet__WEBPACK_IMPORTED_MODULE_2__.fetchWalletForNFTs)(String(address));\n            console.log(`Requested Julia's wallet address ${address}${JSON.stringify(result)}`);\n            const myresult = JSON.stringify(result);\n            //   console.log(myresult.key);\n            return result;\n        };\n        result = readResults();\n        console.log(JSON.stringify(result));\n        console.log(result.key);\n        // var p = Promise.resolve(result);\n        return(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                    children: \"Reading NFTs from wallet\"\n                }, void 0, false, {\n                    fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/readNFT.tsx\",\n                    lineNumber: 45,\n                    columnNumber: 9\n                }, undefined),\n                \"hello\"\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/readNFT.tsx\",\n            lineNumber: 44,\n            columnNumber: 7\n        }, undefined));\n    } else {\n        console.log(`No wallet connected.`);\n        return(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                children: \"Reading NFTs from wallet\"\n            }, void 0, false, {\n                fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/readNFT.tsx\",\n                lineNumber: 54,\n                columnNumber: 9\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/readNFT.tsx\",\n            lineNumber: 53,\n            columnNumber: 7\n        }, undefined));\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (readNFT);\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9yZWFkTkZULnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDd0Q7QUFFcUI7QUFhN0UsRUFBK0Q7QUFDL0QsRUFBMEQ7QUFFMUQsS0FBSyxDQUFDRSxPQUFPLE9BQVMsQ0FBQztJQUNyQixLQUFLLENBQUNDLE1BQU0sR0FBR0gsdUVBQVM7SUFDeEIsR0FBRyxDQUFDSSxNQUFNO0lBRVYsRUFBa0I7SUFDbEIsRUFBRSxFQUFFRCxNQUFNLENBQUNFLFNBQVMsRUFBRSxDQUFDO1FBQ3JCLEtBQUssQ0FBQ0MsT0FBTyxHQUFHSCxNQUFNLENBQUNJLFNBQVM7UUFDaENDLE9BQU8sQ0FBQ0MsR0FBRyxFQUFFLHFCQUFxQixFQUFFSCxPQUFPO1FBRTNDLEtBQUssQ0FBQ0ksV0FBVyxhQUFlLENBQUM7WUFDL0JOLE1BQU0sR0FBRyxLQUFLLENBQUNILHNFQUFrQixDQUFDVSxNQUFNLENBQUNMLE9BQU87WUFDaERFLE9BQU8sQ0FBQ0MsR0FBRyxFQUNSLGlDQUFpQyxFQUFFSCxPQUFPLEdBQUdNLElBQUksQ0FBQ0MsU0FBUyxDQUFDVCxNQUFNO1lBRXJFLEtBQUssQ0FBQ1UsUUFBUSxHQUFHRixJQUFJLENBQUNDLFNBQVMsQ0FBQ1QsTUFBTTtZQUN0QyxFQUErQjtZQUMvQixNQUFNLENBQUNBLE1BQU07UUFDZixDQUFDO1FBRURBLE1BQU0sR0FBR00sV0FBVztRQUNwQkYsT0FBTyxDQUFDQyxHQUFHLENBQUNHLElBQUksQ0FBQ0MsU0FBUyxDQUFDVCxNQUFNO1FBQ2pDSSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0wsTUFBTSxDQUFDVyxHQUFHO1FBQ3RCLEVBQW1DO1FBQ25DLE1BQU0sNkVBQ0hDLENBQUc7OzRGQUNEQyxDQUFFOzhCQUFDLENBQXdCOzs7Ozs7Z0JBQ1YsQ0FFcEI7Ozs7Ozs7SUFFSixDQUFDLE1BQU0sQ0FBQztRQUNOVCxPQUFPLENBQUNDLEdBQUcsRUFBRSxvQkFBb0I7UUFDakMsTUFBTSw2RUFDSE8sQ0FBRztrR0FDREMsQ0FBRTswQkFBQyxDQUF3Qjs7Ozs7Ozs7Ozs7SUFHbEMsQ0FBQztBQUNILENBQUM7QUFFRCxpRUFBZWYsT0FBTyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVzdDEvLi9wYWdlcy9yZWFkTkZULnRzeD85MTU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VXYWxsZXQgfSBmcm9tIFwiQHNvbGFuYS93YWxsZXQtYWRhcHRlci1yZWFjdFwiO1xuaW1wb3J0ICogYXMgYW5jaG9yIGZyb20gXCJAcHJvamVjdC1zZXJ1bS9hbmNob3JcIjtcbmltcG9ydCB7IGZldGNoV2FsbGV0Rm9yTkZUcywgZ2V0VHJhbnNhY3Rpb25EYXRhIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvd2FsbGV0XCI7XG4vLyBpbXBvcnQge1xuLy8gICBXYWxsZXREaXNjb25uZWN0QnV0dG9uLFxuLy8gICBXYWxsZXRNdWx0aUJ1dHRvbixcbi8vIH0gZnJvbSBcIkBzb2xhbmEvd2FsbGV0LWFkYXB0ZXItcmVhY3QtdWlcIjtcbi8vIGltcG9ydCBzdHlsZXMgZnJvbSBcIi4uL3N0eWxlcy9Ib21lLm1vZHVsZS5jc3NcIjtcbmltcG9ydCB7XG4gIEFjY291bnRJbmZvLFxuICBDb25uZWN0aW9uLFxuICBQYXJzZWRDb25maXJtZWRUcmFuc2FjdGlvbixcbiAgUHVibGljS2V5LFxufSBmcm9tIFwiQHNvbGFuYS93ZWIzLmpzXCI7XG5pbXBvcnQgeyByZXNvdXJjZUxpbWl0cyB9IGZyb20gXCJ3b3JrZXJfdGhyZWFkc1wiO1xuLy8gaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbi8vIGltcG9ydCB7IHJlbmRlclRvSFRNTCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JlbmRlclwiO1xuXG5jb25zdCByZWFkTkZUID0gKCkgPT4ge1xuICBjb25zdCB3YWxsZXQgPSB1c2VXYWxsZXQoKTtcbiAgdmFyIHJlc3VsdDtcblxuICAvLyAgIGNvbnN0IHJlc3VsdDtcbiAgaWYgKHdhbGxldC5jb25uZWN0ZWQpIHtcbiAgICBjb25zdCBhZGRyZXNzID0gd2FsbGV0LnB1YmxpY0tleTtcbiAgICBjb25zb2xlLmxvZyhgUmVhZGluZyBmcm9tIHdhbGxldDogJHthZGRyZXNzfWApO1xuXG4gICAgY29uc3QgcmVhZFJlc3VsdHMgPSBhc3luYyAoKSA9PiB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBmZXRjaFdhbGxldEZvck5GVHMoU3RyaW5nKGFkZHJlc3MpKTtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgUmVxdWVzdGVkIEp1bGlhJ3Mgd2FsbGV0IGFkZHJlc3MgJHthZGRyZXNzfSR7SlNPTi5zdHJpbmdpZnkocmVzdWx0KX1gXG4gICAgICApO1xuICAgICAgY29uc3QgbXlyZXN1bHQgPSBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xuICAgICAgLy8gICBjb25zb2xlLmxvZyhteXJlc3VsdC5rZXkpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgcmVzdWx0ID0gcmVhZFJlc3VsdHMoKTtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgICBjb25zb2xlLmxvZyhyZXN1bHQua2V5KTtcbiAgICAvLyB2YXIgcCA9IFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8aDI+UmVhZGluZyBORlRzIGZyb20gd2FsbGV0PC9oMj5cbiAgICAgICAgey8qIHtteXJlc3VsdH0gKi99XG4gICAgICAgIGhlbGxvXG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKGBObyB3YWxsZXQgY29ubmVjdGVkLmApO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8aDI+UmVhZGluZyBORlRzIGZyb20gd2FsbGV0PC9oMj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlYWRORlQ7XG4iXSwibmFtZXMiOlsidXNlV2FsbGV0IiwiZmV0Y2hXYWxsZXRGb3JORlRzIiwicmVhZE5GVCIsIndhbGxldCIsInJlc3VsdCIsImNvbm5lY3RlZCIsImFkZHJlc3MiLCJwdWJsaWNLZXkiLCJjb25zb2xlIiwibG9nIiwicmVhZFJlc3VsdHMiLCJTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwibXlyZXN1bHQiLCJrZXkiLCJkaXYiLCJoMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/readNFT.tsx\n");

/***/ }),

/***/ "@nfteyez/sol-rayz":
/*!************************************!*\
  !*** external "@nfteyez/sol-rayz" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("@nfteyez/sol-rayz");

/***/ }),

/***/ "@solana/web3.js":
/*!**********************************!*\
  !*** external "@solana/web3.js" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("@solana/web3.js");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "borsh":
/*!************************!*\
  !*** external "borsh" ***!
  \************************/
/***/ ((module) => {

module.exports = require("borsh");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "@solana/wallet-adapter-react":
/*!***********************************************!*\
  !*** external "@solana/wallet-adapter-react" ***!
  \***********************************************/
/***/ ((module) => {

module.exports = import("@solana/wallet-adapter-react");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/readNFT.tsx"));
module.exports = __webpack_exports__;

})();