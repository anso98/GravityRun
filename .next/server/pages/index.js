/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "./styles/Home.module.css":
/*!********************************!*\
  !*** ./styles/Home.module.css ***!
  \********************************/
/***/ ((module) => {

eval("// Exports\nmodule.exports = {\n\t\"container\": \"Home_container__bCOhY\",\n\t\"main\": \"Home_main__nLjiQ\",\n\t\"footer\": \"Home_footer____T7K\",\n\t\"title\": \"Home_title__T09hD\",\n\t\"description\": \"Home_description__41Owk\",\n\t\"walletButtons\": \"Home_walletButtons__Dgpnl\",\n\t\"code\": \"Home_code__suPER\",\n\t\"grid\": \"Home_grid__GxQ85\",\n\t\"card\": \"Home_card___LpL1\",\n\t\"logo\": \"Home_logo__27_tb\",\n\t\"button\": \"Home_button__Zs7A2\",\n\t\"unity\": \"Home_unity__MuAo3\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvSG9tZS5tb2R1bGUuY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rlc3QxLy4vc3R5bGVzL0hvbWUubW9kdWxlLmNzcz83MTI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0ge1xuXHRcImNvbnRhaW5lclwiOiBcIkhvbWVfY29udGFpbmVyX19iQ09oWVwiLFxuXHRcIm1haW5cIjogXCJIb21lX21haW5fX25MamlRXCIsXG5cdFwiZm9vdGVyXCI6IFwiSG9tZV9mb290ZXJfX19fVDdLXCIsXG5cdFwidGl0bGVcIjogXCJIb21lX3RpdGxlX19UMDloRFwiLFxuXHRcImRlc2NyaXB0aW9uXCI6IFwiSG9tZV9kZXNjcmlwdGlvbl9fNDFPd2tcIixcblx0XCJ3YWxsZXRCdXR0b25zXCI6IFwiSG9tZV93YWxsZXRCdXR0b25zX19EZ3BubFwiLFxuXHRcImNvZGVcIjogXCJIb21lX2NvZGVfX3N1UEVSXCIsXG5cdFwiZ3JpZFwiOiBcIkhvbWVfZ3JpZF9fR3hRODVcIixcblx0XCJjYXJkXCI6IFwiSG9tZV9jYXJkX19fTHBMMVwiLFxuXHRcImxvZ29cIjogXCJIb21lX2xvZ29fXzI3X3RiXCIsXG5cdFwiYnV0dG9uXCI6IFwiSG9tZV9idXR0b25fX1pzN0EyXCIsXG5cdFwidW5pdHlcIjogXCJIb21lX3VuaXR5X19NdUFvM1wiXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./styles/Home.module.css\n");

/***/ }),

/***/ "./components/candy-machine.ts":
/*!*************************************!*\
  !*** ./components/candy-machine.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CANDY_MACHINE_PROGRAM\": () => (/* binding */ CANDY_MACHINE_PROGRAM),\n/* harmony export */   \"awaitTransactionSignatureConfirmation\": () => (/* binding */ awaitTransactionSignatureConfirmation),\n/* harmony export */   \"getCandyMachineState\": () => (/* binding */ getCandyMachineState),\n/* harmony export */   \"getCandyMachineCreator\": () => (/* binding */ getCandyMachineCreator),\n/* harmony export */   \"mintOneToken\": () => (/* binding */ mintOneToken),\n/* harmony export */   \"shortenAddress\": () => (/* binding */ shortenAddress)\n/* harmony export */ });\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @project-serum/anchor */ \"@project-serum/anchor\");\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/spl-token */ \"@solana/spl-token\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_solana_web3_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! process */ \"process\");\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(process__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _connection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./connection */ \"./components/connection.tsx\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"./components/utils.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_connection__WEBPACK_IMPORTED_MODULE_4__]);\n_connection__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n/* this component defines functions withwhich to interact with the candy machine. These\nare then called by other components. Taken with (some) alterations from metaplex */ \n\n\n\n\n\nconst CANDY_MACHINE_PROGRAM = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey('cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ');\nconst TOKEN_METADATA_PROGRAM_ID = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');\nconst awaitTransactionSignatureConfirmation = async (txid, timeout, connection, queryStatus = false)=>{\n    let done = false;\n    let status = {\n        slot: 0,\n        confirmations: 0,\n        err: null\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject)=>{\n        setTimeout(()=>{\n            if (done) {\n                return;\n            }\n            done = true;\n            console.log('Rejecting for timeout...');\n            reject({\n                timeout: true\n            });\n        }, timeout);\n        while(!done && queryStatus){\n            // eslint-disable-next-line no-loop-func\n            (async ()=>{\n                try {\n                    const signatureStatuses = await connection.getSignatureStatuses([\n                        txid, \n                    ]);\n                    status = signatureStatuses && signatureStatuses.value[0];\n                    if (!done) {\n                        if (!status) {\n                            console.log('REST null result for', txid, status);\n                        } else if (status.err) {\n                            console.log('REST error for', txid, status);\n                            done = true;\n                            reject(status.err);\n                        } else if (!status.confirmations) {\n                            console.log('REST no confirmations for', txid, status);\n                        } else {\n                            console.log('REST confirmation for', txid, status);\n                            done = true;\n                            resolve(status);\n                        }\n                    }\n                } catch (e) {\n                    if (!done) {\n                        console.log('REST connection error: txid', txid, e);\n                    }\n                }\n            })();\n            await sleep(2000);\n        }\n    });\n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId]) {\n        connection.removeSignatureListener(subId);\n    }\n    done = true;\n    console.log('Returning status', status);\n    return status;\n};\nconst createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress)=>{\n    const keys = [\n        {\n            pubkey: payer,\n            isSigner: true,\n            isWritable: true\n        },\n        {\n            pubkey: associatedTokenAddress,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: walletAddress,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: splTokenMintAddress,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SystemProgram.programId,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false\n        }, \n    ];\n    return new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.TransactionInstruction({\n        keys,\n        programId: _utils__WEBPACK_IMPORTED_MODULE_5__.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([])\n    });\n};\nconst getCandyMachineState = async (anchorWallet, candyMachineId, connection)=>{\n    const provider = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.Provider(connection, anchorWallet, {\n        preflightCommitment: 'recent'\n    });\n    const idl = await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    let program;\n    if (idl != null) program = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n    else (0,process__WEBPACK_IMPORTED_MODULE_3__.exit)(1) // I ADDED THIS\n    ;\n    const state = await program.account.candyMachine.fetch(candyMachineId);\n    const itemsAvailable = state.data.itemsAvailable.toNumber();\n    const itemsRedeemed = state.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const presale = state.data.whitelistMintSettings && state.data.whitelistMintSettings.presale && (!state.data.goLiveDate || state.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n    return {\n        id: candyMachineId,\n        program,\n        state: {\n            itemsAvailable,\n            itemsRedeemed,\n            itemsRemaining,\n            isSoldOut: itemsRemaining === 0,\n            isActive: (presale || state.data.goLiveDate.toNumber() < new Date().getTime() / 1000) && (state.data.endSettings ? state.data.endSettings.endSettingType.date ? state.data.endSettings.number.toNumber() > new Date().getTime() / 1000 : itemsRedeemed < state.data.endSettings.number.toNumber() : true),\n            isPresale: presale,\n            goLiveDate: state.data.goLiveDate,\n            treasury: state.wallet,\n            tokenMint: state.tokenMint,\n            gatekeeper: state.data.gatekeeper,\n            endSettings: state.data.endSettings,\n            whitelistMintSettings: state.data.whitelistMintSettings,\n            hiddenSettings: state.data.hiddenSettings,\n            price: state.data.price\n        }\n    };\n};\nconst getMasterEdition = async (mint)=>{\n    return (await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'), \n    ], TOKEN_METADATA_PROGRAM_ID))[0];\n};\nconst getMetadata = async (mint)=>{\n    return (await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(), \n    ], TOKEN_METADATA_PROGRAM_ID))[0];\n};\nconst getCandyMachineCreator = async (candyMachine)=>{\n    return await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        Buffer.from('candy_machine'),\n        candyMachine.toBuffer()\n    ], CANDY_MACHINE_PROGRAM);\n};\nconst mintOneToken = async (candyMachine, payer)=>{\n    const mint = _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.Keypair.generate();\n    const userTokenAccountAddress = (await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getAtaForMint)(mint.publicKey, payer))[0];\n    const userPayingAccountAddress = candyMachine.state.tokenMint ? (await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getAtaForMint)(candyMachine.state.tokenMint, payer))[0] : payer;\n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const signers = [\n        mint\n    ];\n    const cleanupInstructions = [];\n    const instructions = [\n        _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SystemProgram.createAccount({\n            fromPubkey: payer,\n            newAccountPubkey: mint.publicKey,\n            space: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.MintLayout.span,\n            lamports: await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.MintLayout.span),\n            programId: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID\n        }),\n        _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createInitMintInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer),\n        createAssociatedTokenAccountInstruction(userTokenAccountAddress, payer, payer, mint.publicKey),\n        _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createMintToInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, mint.publicKey, userTokenAccountAddress, payer, [], 1), \n    ];\n    if (candyMachine.state.gatekeeper) {\n        remainingAccounts.push({\n            pubkey: (await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getNetworkToken)(payer, candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n            isWritable: true,\n            isSigner: false\n        });\n        if (candyMachine.state.gatekeeper.expireOnUse) {\n            remainingAccounts.push({\n                pubkey: _utils__WEBPACK_IMPORTED_MODULE_5__.CIVIC,\n                isWritable: false,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: (await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getNetworkExpire)(candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n                isWritable: false,\n                isSigner: false\n            });\n        }\n    }\n    if (candyMachine.state.whitelistMintSettings) {\n        const mint = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey(candyMachine.state.whitelistMintSettings.mint);\n        const whitelistToken = (await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getAtaForMint)(mint, payer))[0];\n        remainingAccounts.push({\n            pubkey: whitelistToken,\n            isWritable: true,\n            isSigner: false\n        });\n        if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n            const whitelistBurnAuthority = _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.Keypair.generate();\n            remainingAccounts.push({\n                pubkey: mint,\n                isWritable: true,\n                isSigner: false\n            });\n            remainingAccounts.push({\n                pubkey: whitelistBurnAuthority.publicKey,\n                isWritable: false,\n                isSigner: true\n            });\n            signers.push(whitelistBurnAuthority);\n            const exists = await candyMachine.program.provider.connection.getAccountInfo(whitelistToken);\n            if (exists) {\n                instructions.push(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createApproveInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, whitelistToken, whitelistBurnAuthority.publicKey, payer, [], 1));\n                cleanupInstructions.push(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createRevokeInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, whitelistToken, payer, []));\n            }\n        }\n    }\n    if (candyMachine.state.tokenMint) {\n        const transferAuthority = _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.Keypair.generate();\n        signers.push(transferAuthority);\n        remainingAccounts.push({\n            pubkey: userPayingAccountAddress,\n            isWritable: true,\n            isSigner: false\n        });\n        remainingAccounts.push({\n            pubkey: transferAuthority.publicKey,\n            isWritable: false,\n            isSigner: true\n        });\n        instructions.push(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createApproveInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, userPayingAccountAddress, transferAuthority.publicKey, payer, [], candyMachine.state.price.toNumber()));\n        cleanupInstructions.push(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.Token.createRevokeInstruction(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID, userPayingAccountAddress, payer, []));\n    }\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(candyMachineAddress);\n    instructions.push(await candyMachine.program.instruction.mintNft(creatorBump, {\n        accounts: {\n            candyMachine: candyMachineAddress,\n            candyMachineCreator,\n            payer: payer,\n            wallet: candyMachine.state.treasury,\n            mint: mint.publicKey,\n            metadata: metadataAddress,\n            masterEdition,\n            mintAuthority: payer,\n            updateAuthority: payer,\n            tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n            tokenProgram: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID,\n            systemProgram: _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.SystemProgram.programId,\n            rent: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SYSVAR_RENT_PUBKEY,\n            clock: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SYSVAR_CLOCK_PUBKEY,\n            recentBlockhashes: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n            instructionSysvarAccount: _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.SYSVAR_INSTRUCTIONS_PUBKEY\n        },\n        remainingAccounts: remainingAccounts.length > 0 ? remainingAccounts : undefined\n    }));\n    try {\n        return (await (0,_connection__WEBPACK_IMPORTED_MODULE_4__.sendTransactions)(candyMachine.program.provider.connection, candyMachine.program.provider.wallet, [\n            instructions,\n            cleanupInstructions\n        ], [\n            signers,\n            []\n        ])).txs.map((t)=>t.txid\n        );\n    } catch (e) {\n        console.log(e);\n    }\n    return [];\n};\nconst shortenAddress = (address, chars = 4)=>{\n    return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\nconst sleep = (ms)=>{\n    return new Promise((resolve)=>setTimeout(resolve, ms)\n    );\n};\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/candy-machine.ts\n");

/***/ }),

/***/ "./components/connection.tsx":
/*!***********************************!*\
  !*** ./components/connection.tsx ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getErrorForTransaction\": () => (/* binding */ getErrorForTransaction),\n/* harmony export */   \"SequenceType\": () => (/* binding */ SequenceType),\n/* harmony export */   \"sendTransactionsWithManualRetry\": () => (/* binding */ sendTransactionsWithManualRetry),\n/* harmony export */   \"sendTransactions\": () => (/* binding */ sendTransactions),\n/* harmony export */   \"sendTransaction\": () => (/* binding */ sendTransaction),\n/* harmony export */   \"sendTransactionWithRetry\": () => (/* binding */ sendTransactionWithRetry),\n/* harmony export */   \"getUnixTs\": () => (/* binding */ getUnixTs),\n/* harmony export */   \"sendSignedTransaction\": () => (/* binding */ sendSignedTransaction),\n/* harmony export */   \"sleep\": () => (/* binding */ sleep)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/wallet-adapter-base */ \"@solana/wallet-adapter-base\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__]);\n_solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n/* this component defines various functions required by the candy-machine.ts component to send instructions\nto the smart contract - copied from metaplex */ \n\nconst getErrorForTransaction = async (connection, txid)=>{\n    // wait for all confirmation before geting transaction\n    await connection.confirmTransaction(txid, 'max');\n    const tx = await connection.getParsedConfirmedTransaction(txid);\n    const errors = [];\n    if (tx?.meta && tx.meta.logMessages) {\n        tx.meta.logMessages.forEach((log)=>{\n            const regex = /Error: (.*)/gm;\n            let m;\n            while((m = regex.exec(log)) !== null){\n                // This is necessary to avoid infinite loops with zero-width matches\n                if (m.index === regex.lastIndex) {\n                    regex.lastIndex++;\n                }\n                if (m.length > 1) {\n                    errors.push(m[1]);\n                }\n            }\n        });\n    }\n    return errors;\n};\nvar SequenceType;\n(function(SequenceType) {\n    SequenceType[SequenceType[\"Sequential\"] = 0] = \"Sequential\";\n    SequenceType[SequenceType[\"Parallel\"] = 1] = \"Parallel\";\n    SequenceType[SequenceType[\"StopOnFailure\"] = 2] = \"StopOnFailure\";\n})(SequenceType || (SequenceType = {}));\nasync function sendTransactionsWithManualRetry(connection, wallet, instructions, signers) {\n    let stopPoint = 0;\n    let tries = 0;\n    let lastInstructionsLength = null;\n    let toRemoveSigners = {};\n    instructions = instructions.filter((instr, i)=>{\n        if (instr.length > 0) {\n            return true;\n        } else {\n            toRemoveSigners[i] = true;\n            return false;\n        }\n    });\n    let ids = [];\n    let filteredSigners = signers.filter((_, i)=>!toRemoveSigners[i]\n    );\n    while(stopPoint < instructions.length && tries < 3){\n        instructions = instructions.slice(stopPoint, instructions.length);\n        filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n        if (instructions.length === lastInstructionsLength) tries = tries + 1;\n        else tries = 0;\n        try {\n            if (instructions.length === 1) {\n                const id = await sendTransactionWithRetry(connection, wallet, instructions[0], filteredSigners[0], 'single');\n                ids.push(id.txid);\n                stopPoint = 1;\n            } else {\n                const { txs  } = await sendTransactions(connection, wallet, instructions, filteredSigners, SequenceType.StopOnFailure, 'single');\n                ids = ids.concat(txs.map((t)=>t.txid\n                ));\n            }\n        } catch (e) {\n            console.error(e);\n        }\n        console.log('Died on ', stopPoint, 'retrying from instruction', instructions[stopPoint], 'instructions length is', instructions.length);\n        lastInstructionsLength = instructions.length;\n    }\n    return ids;\n}\nconst sendTransactions = async (connection, wallet, instructionSet, signersSet, sequenceType = SequenceType.Parallel, commitment = 'singleGossip', successCallback = (txid, ind)=>{}, failCallback = (txid, ind)=>false\n, block)=>{\n    if (!wallet.publicKey) throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__.WalletNotConnectedError();\n    const unsignedTxns = [];\n    if (!block) {\n        block = await connection.getRecentBlockhash(commitment);\n    }\n    for(let i = 0; i < instructionSet.length; i++){\n        const instructions = instructionSet[i];\n        const signers = signersSet[i];\n        if (instructions.length === 0) {\n            continue;\n        }\n        let transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n        instructions.forEach((instruction)=>transaction.add(instruction)\n        );\n        transaction.recentBlockhash = block.blockhash;\n        transaction.setSigners(// fee payed by the wallet owner\n        wallet.publicKey, ...signers.map((s)=>s.publicKey\n        ));\n        if (signers.length > 0) {\n            transaction.partialSign(...signers);\n        }\n        unsignedTxns.push(transaction);\n    }\n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n    const pendingTxns = [];\n    let breakEarlyObject = {\n        breakEarly: false,\n        i: 0\n    };\n    console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\n    for(let i1 = 0; i1 < signedTxns.length; i1++){\n        const signedTxnPromise = sendSignedTransaction({\n            connection,\n            signedTransaction: signedTxns[i1]\n        });\n        signedTxnPromise.then(({ txid , slot  })=>{\n            successCallback(txid, i1);\n        }).catch((reason)=>{\n            // @ts-ignore\n            failCallback(signedTxns[i1], i1);\n            if (sequenceType === SequenceType.StopOnFailure) {\n                breakEarlyObject.breakEarly = true;\n                breakEarlyObject.i = i1;\n            }\n        });\n        if (sequenceType !== SequenceType.Parallel) {\n            try {\n                await signedTxnPromise;\n            } catch (e) {\n                console.log('Caught failure', e);\n                if (breakEarlyObject.breakEarly) {\n                    console.log('Died on ', breakEarlyObject.i);\n                    // Return the txn we failed on by index\n                    return {\n                        number: breakEarlyObject.i,\n                        txs: await Promise.all(pendingTxns)\n                    };\n                }\n            }\n        } else {\n            pendingTxns.push(signedTxnPromise);\n        }\n    }\n    if (sequenceType !== SequenceType.Parallel) {\n        await Promise.all(pendingTxns);\n    }\n    return {\n        number: signedTxns.length,\n        txs: await Promise.all(pendingTxns)\n    };\n};\nconst sendTransaction = async (connection, wallet, instructions, signers, awaitConfirmation = true, commitment = 'singleGossip', includesFeePayer = false, block)=>{\n    if (!wallet.publicKey) throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__.WalletNotConnectedError();\n    let transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n    instructions.forEach((instruction)=>transaction.add(instruction)\n    );\n    transaction.recentBlockhash = (block || await connection.getRecentBlockhash(commitment)).blockhash;\n    if (includesFeePayer) {\n        transaction.setSigners(...signers.map((s)=>s.publicKey\n        ));\n    } else {\n        transaction.setSigners(// fee payed by the wallet owner\n        wallet.publicKey, ...signers.map((s)=>s.publicKey\n        ));\n    }\n    if (signers.length > 0) {\n        transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n        transaction = await wallet.signTransaction(transaction);\n    }\n    const rawTransaction = transaction.serialize();\n    let options = {\n        skipPreflight: true,\n        commitment\n    };\n    const txid = await connection.sendRawTransaction(rawTransaction, options);\n    let slot = 0;\n    if (awaitConfirmation) {\n        const confirmation = await awaitTransactionSignatureConfirmation(txid, DEFAULT_TIMEOUT, connection, commitment);\n        if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction');\n        slot = confirmation?.slot || 0;\n        if (confirmation?.err) {\n            const errors = await getErrorForTransaction(connection, txid);\n            console.log(errors);\n            throw new Error(`Raw transaction ${txid} failed`);\n        }\n    }\n    return {\n        txid,\n        slot\n    };\n};\nconst sendTransactionWithRetry = async (connection, wallet, instructions, signers, commitment = 'singleGossip', includesFeePayer = false, block, beforeSend)=>{\n    if (!wallet.publicKey) throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_1__.WalletNotConnectedError();\n    let transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction();\n    instructions.forEach((instruction)=>transaction.add(instruction)\n    );\n    transaction.recentBlockhash = (block || await connection.getRecentBlockhash(commitment)).blockhash;\n    if (includesFeePayer) {\n        transaction.setSigners(...signers.map((s)=>s.publicKey\n        ));\n    } else {\n        transaction.setSigners(// fee payed by the wallet owner\n        wallet.publicKey, ...signers.map((s)=>s.publicKey\n        ));\n    }\n    if (signers.length > 0) {\n        transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n        transaction = await wallet.signTransaction(transaction);\n    }\n    if (beforeSend) {\n        beforeSend();\n    }\n    const { txid , slot  } = await sendSignedTransaction({\n        connection,\n        signedTransaction: transaction\n    });\n    return {\n        txid,\n        slot\n    };\n};\nconst getUnixTs = ()=>{\n    return new Date().getTime() / 1000;\n};\nconst DEFAULT_TIMEOUT = 15000;\nasync function sendSignedTransaction({ signedTransaction , connection , timeout =DEFAULT_TIMEOUT  }) {\n    const rawTransaction = signedTransaction.serialize();\n    const startTime = getUnixTs();\n    let slot = 0;\n    const txid = await connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true\n    });\n    console.log('Started awaiting confirmation for', txid);\n    let done = false;\n    (async ()=>{\n        while(!done && getUnixTs() - startTime < timeout){\n            connection.sendRawTransaction(rawTransaction, {\n                skipPreflight: true\n            });\n            await sleep(500);\n        }\n    })();\n    try {\n        const confirmation = await awaitTransactionSignatureConfirmation(txid, timeout, connection, 'recent', true);\n        if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction');\n        if (confirmation.err) {\n            console.error(confirmation.err);\n            throw new Error('Transaction failed: Custom instruction error');\n        }\n        slot = confirmation?.slot || 0;\n    } catch (err) {\n        console.error('Timeout Error caught', err);\n        if (err.timeout) {\n            throw new Error('Timed out awaiting confirmation on transaction');\n        }\n        let simulateResult = null;\n        try {\n            simulateResult = (await simulateTransaction(connection, signedTransaction, 'single')).value;\n        } catch (e) {}\n        if (simulateResult && simulateResult.err) {\n            if (simulateResult.logs) {\n                for(let i = simulateResult.logs.length - 1; i >= 0; --i){\n                    const line = simulateResult.logs[i];\n                    if (line.startsWith('Program log: ')) {\n                        throw new Error('Transaction failed: ' + line.slice('Program log: '.length));\n                    }\n                }\n            }\n            throw new Error(JSON.stringify(simulateResult.err));\n        }\n    // throw new Error('Transaction failed');\n    } finally{\n        done = true;\n    }\n    console.log('Latency', txid, getUnixTs() - startTime);\n    return {\n        txid,\n        slot\n    };\n}\nasync function simulateTransaction(connection, transaction, commitment) {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(// @ts-ignore\n    connection._disableBlockhashCaching);\n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n        encoding: 'base64',\n        commitment\n    };\n    const args = [\n        encodedTransaction,\n        config\n    ];\n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n}\nasync function awaitTransactionSignatureConfirmation(txid, timeout, connection, commitment = 'recent', queryStatus = false) {\n    let done = false;\n    let status = {\n        slot: 0,\n        confirmations: 0,\n        err: null\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject)=>{\n        setTimeout(()=>{\n            if (done) {\n                return;\n            }\n            done = true;\n            console.log('Rejecting for timeout...');\n            reject({\n                timeout: true\n            });\n        }, timeout);\n        try {\n            subId = connection.onSignature(txid, (result, context)=>{\n                done = true;\n                status = {\n                    err: result.err,\n                    slot: context.slot,\n                    confirmations: 0\n                };\n                if (result.err) {\n                    console.log('Rejected via websocket', result.err);\n                    reject(status);\n                } else {\n                    console.log('Resolved via websocket', result);\n                    resolve(status);\n                }\n            }, commitment);\n        } catch (e1) {\n            done = true;\n            console.error('WS error in setup', txid, e1);\n        }\n        while(!done && queryStatus){\n            // eslint-disable-next-line no-loop-func\n            (async ()=>{\n                try {\n                    const signatureStatuses = await connection.getSignatureStatuses([\n                        txid, \n                    ]);\n                    status = signatureStatuses && signatureStatuses.value[0];\n                    if (!done) {\n                        if (!status) {\n                            console.log('REST null result for', txid, status);\n                        } else if (status.err) {\n                            console.log('REST error for', txid, status);\n                            done = true;\n                            reject(status.err);\n                        } else if (!status.confirmations) {\n                            console.log('REST no confirmations for', txid, status);\n                        } else {\n                            console.log('REST confirmation for', txid, status);\n                            done = true;\n                            resolve(status);\n                        }\n                    }\n                } catch (e) {\n                    if (!done) {\n                        console.log('REST connection error: txid', txid, e);\n                    }\n                }\n            })();\n            await sleep(2000);\n        }\n    });\n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId]) connection.removeSignatureListener(subId);\n    done = true;\n    console.log('Returning status', status);\n    return status;\n}\nfunction sleep(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms)\n    );\n}\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eUQsSUFBSSxFQUFFLENBQUM7d0JBQ1Z4RCxPQUFPLENBQUNuQyxHQUFHLENBQUMsQ0FBNkIsOEJBQUVSLElBQUksRUFBRTBDLENBQUM7b0JBQ3BELENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUM7WUFDRCxLQUFLLENBQUMwRCxLQUFLLENBQUMsSUFBSTtRQUNsQixDQUFDO0lBQ0gsQ0FBQztJQUVELEVBQVk7SUFDWixFQUFFLEVBQUVyRyxVQUFVLENBQUN3SSx1QkFBdUIsQ0FBQ1IsS0FBSyxHQUMxQ2hJLFVBQVUsQ0FBQ3lJLHVCQUF1QixDQUFDVCxLQUFLO0lBQzFDNUIsSUFBSSxHQUFHLElBQUk7SUFDWHhELE9BQU8sQ0FBQ25DLEdBQUcsQ0FBQyxDQUFrQixtQkFBRXFILE1BQU07SUFDdEMsTUFBTSxDQUFDQSxNQUFNO0FBQ2YsQ0FBQztBQUNNLFNBQVN6QixLQUFLLENBQUNxQyxFQUFVLEVBQWlCLENBQUM7SUFDaEQsTUFBTSxDQUFDLEdBQUcsQ0FBQzVELE9BQU8sRUFBQ21ELE9BQU8sR0FBSUUsVUFBVSxDQUFDRixPQUFPLEVBQUVTLEVBQUU7O0FBQ3RELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXN0MS8uL2NvbXBvbmVudHMvY29ubmVjdGlvbi50c3g/NWJmOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0aGlzIGNvbXBvbmVudCBkZWZpbmVzIHZhcmlvdXMgZnVuY3Rpb25zIHJlcXVpcmVkIGJ5IHRoZSBjYW5keS1tYWNoaW5lLnRzIGNvbXBvbmVudCB0byBzZW5kIGluc3RydWN0aW9uc1xudG8gdGhlIHNtYXJ0IGNvbnRyYWN0IC0gY29waWVkIGZyb20gbWV0YXBsZXggKi9cblxuaW1wb3J0IHtcbiAgS2V5cGFpcixcbiAgQ29tbWl0bWVudCxcbiAgQ29ubmVjdGlvbixcbiAgUnBjUmVzcG9uc2VBbmRDb250ZXh0LFxuICBTaWduYXR1cmVTdGF0dXMsXG4gIFNpbXVsYXRlZFRyYW5zYWN0aW9uUmVzcG9uc2UsXG4gIFRyYW5zYWN0aW9uLFxuICBUcmFuc2FjdGlvbkluc3RydWN0aW9uLFxuICBUcmFuc2FjdGlvblNpZ25hdHVyZSxcbiAgQmxvY2toYXNoLFxuICBGZWVDYWxjdWxhdG9yLFxufSBmcm9tICdAc29sYW5hL3dlYjMuanMnO1xuXG5pbXBvcnQgeyBXYWxsZXROb3RDb25uZWN0ZWRFcnJvciB9IGZyb20gJ0Bzb2xhbmEvd2FsbGV0LWFkYXB0ZXItYmFzZSc7XG5cbmludGVyZmFjZSBCbG9ja2hhc2hBbmRGZWVDYWxjdWxhdG9yIHtcbiAgYmxvY2toYXNoOiBCbG9ja2hhc2g7XG4gIGZlZUNhbGN1bGF0b3I6IEZlZUNhbGN1bGF0b3I7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRFcnJvckZvclRyYW5zYWN0aW9uID0gYXN5bmMgKFxuICBjb25uZWN0aW9uOiBDb25uZWN0aW9uLFxuICB0eGlkOiBzdHJpbmcsXG4pID0+IHtcbiAgLy8gd2FpdCBmb3IgYWxsIGNvbmZpcm1hdGlvbiBiZWZvcmUgZ2V0aW5nIHRyYW5zYWN0aW9uXG4gIGF3YWl0IGNvbm5lY3Rpb24uY29uZmlybVRyYW5zYWN0aW9uKHR4aWQsICdtYXgnKTtcblxuICBjb25zdCB0eCA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0UGFyc2VkQ29uZmlybWVkVHJhbnNhY3Rpb24odHhpZCk7XG5cbiAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuICBpZiAodHg/Lm1ldGEgJiYgdHgubWV0YS5sb2dNZXNzYWdlcykge1xuICAgIHR4Lm1ldGEubG9nTWVzc2FnZXMuZm9yRWFjaChsb2cgPT4ge1xuICAgICAgY29uc3QgcmVnZXggPSAvRXJyb3I6ICguKikvZ207XG4gICAgICBsZXQgbTtcbiAgICAgIHdoaWxlICgobSA9IHJlZ2V4LmV4ZWMobG9nKSkgIT09IG51bGwpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgdG8gYXZvaWQgaW5maW5pdGUgbG9vcHMgd2l0aCB6ZXJvLXdpZHRoIG1hdGNoZXNcbiAgICAgICAgaWYgKG0uaW5kZXggPT09IHJlZ2V4Lmxhc3RJbmRleCkge1xuICAgICAgICAgIHJlZ2V4Lmxhc3RJbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG0ubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKG1bMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZXJyb3JzO1xufTtcblxuZXhwb3J0IGVudW0gU2VxdWVuY2VUeXBlIHtcbiAgU2VxdWVudGlhbCxcbiAgUGFyYWxsZWwsXG4gIFN0b3BPbkZhaWx1cmUsXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kVHJhbnNhY3Rpb25zV2l0aE1hbnVhbFJldHJ5KFxuICBjb25uZWN0aW9uOiBDb25uZWN0aW9uLFxuICB3YWxsZXQ6IGFueSxcbiAgaW5zdHJ1Y3Rpb25zOiBUcmFuc2FjdGlvbkluc3RydWN0aW9uW11bXSxcbiAgc2lnbmVyczogS2V5cGFpcltdW10sXG4pOiBQcm9taXNlPChzdHJpbmcgfCB1bmRlZmluZWQpW10+IHtcbiAgbGV0IHN0b3BQb2ludCA9IDA7XG4gIGxldCB0cmllcyA9IDA7XG4gIGxldCBsYXN0SW5zdHJ1Y3Rpb25zTGVuZ3RoID0gbnVsbDtcbiAgbGV0IHRvUmVtb3ZlU2lnbmVyczogUmVjb3JkPG51bWJlciwgYm9vbGVhbj4gPSB7fTtcbiAgaW5zdHJ1Y3Rpb25zID0gaW5zdHJ1Y3Rpb25zLmZpbHRlcigoaW5zdHIsIGkpID0+IHtcbiAgICBpZiAoaW5zdHIubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvUmVtb3ZlU2lnbmVyc1tpXSA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgbGV0IGlkczogc3RyaW5nW10gPSBbXTtcbiAgbGV0IGZpbHRlcmVkU2lnbmVycyA9IHNpZ25lcnMuZmlsdGVyKChfLCBpKSA9PiAhdG9SZW1vdmVTaWduZXJzW2ldKTtcblxuICB3aGlsZSAoc3RvcFBvaW50IDwgaW5zdHJ1Y3Rpb25zLmxlbmd0aCAmJiB0cmllcyA8IDMpIHtcbiAgICBpbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbnMuc2xpY2Uoc3RvcFBvaW50LCBpbnN0cnVjdGlvbnMubGVuZ3RoKTtcbiAgICBmaWx0ZXJlZFNpZ25lcnMgPSBmaWx0ZXJlZFNpZ25lcnMuc2xpY2Uoc3RvcFBvaW50LCBmaWx0ZXJlZFNpZ25lcnMubGVuZ3RoKTtcblxuICAgIGlmIChpbnN0cnVjdGlvbnMubGVuZ3RoID09PSBsYXN0SW5zdHJ1Y3Rpb25zTGVuZ3RoKSB0cmllcyA9IHRyaWVzICsgMTtcbiAgICBlbHNlIHRyaWVzID0gMDtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoaW5zdHJ1Y3Rpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCBpZCA9IGF3YWl0IHNlbmRUcmFuc2FjdGlvbldpdGhSZXRyeShcbiAgICAgICAgICBjb25uZWN0aW9uLFxuICAgICAgICAgIHdhbGxldCxcbiAgICAgICAgICBpbnN0cnVjdGlvbnNbMF0sXG4gICAgICAgICAgZmlsdGVyZWRTaWduZXJzWzBdLFxuICAgICAgICAgICdzaW5nbGUnLFxuICAgICAgICApO1xuICAgICAgICBpZHMucHVzaChpZC50eGlkKTtcbiAgICAgICAgc3RvcFBvaW50ID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgdHhzIH0gPSBhd2FpdCBzZW5kVHJhbnNhY3Rpb25zKFxuICAgICAgICAgIGNvbm5lY3Rpb24sXG4gICAgICAgICAgd2FsbGV0LFxuICAgICAgICAgIGluc3RydWN0aW9ucyxcbiAgICAgICAgICBmaWx0ZXJlZFNpZ25lcnMsXG4gICAgICAgICAgU2VxdWVuY2VUeXBlLlN0b3BPbkZhaWx1cmUsXG4gICAgICAgICAgJ3NpbmdsZScsXG4gICAgICAgICk7XG4gICAgICAgIGlkcyA9IGlkcy5jb25jYXQodHhzLm1hcCh0ID0+IHQudHhpZCkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgJ0RpZWQgb24gJyxcbiAgICAgIHN0b3BQb2ludCxcbiAgICAgICdyZXRyeWluZyBmcm9tIGluc3RydWN0aW9uJyxcbiAgICAgIGluc3RydWN0aW9uc1tzdG9wUG9pbnRdLFxuICAgICAgJ2luc3RydWN0aW9ucyBsZW5ndGggaXMnLFxuICAgICAgaW5zdHJ1Y3Rpb25zLmxlbmd0aCxcbiAgICApO1xuICAgIGxhc3RJbnN0cnVjdGlvbnNMZW5ndGggPSBpbnN0cnVjdGlvbnMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIGlkcztcbn1cblxuZXhwb3J0IGNvbnN0IHNlbmRUcmFuc2FjdGlvbnMgPSBhc3luYyAoXG4gIGNvbm5lY3Rpb246IENvbm5lY3Rpb24sXG4gIHdhbGxldDogYW55LFxuICBpbnN0cnVjdGlvblNldDogVHJhbnNhY3Rpb25JbnN0cnVjdGlvbltdW10sXG4gIHNpZ25lcnNTZXQ6IEtleXBhaXJbXVtdLFxuICBzZXF1ZW5jZVR5cGU6IFNlcXVlbmNlVHlwZSA9IFNlcXVlbmNlVHlwZS5QYXJhbGxlbCxcbiAgY29tbWl0bWVudDogQ29tbWl0bWVudCA9ICdzaW5nbGVHb3NzaXAnLFxuICBzdWNjZXNzQ2FsbGJhY2s6ICh0eGlkOiBzdHJpbmcsIGluZDogbnVtYmVyKSA9PiB2b2lkID0gKHR4aWQsIGluZCkgPT4ge30sXG4gIGZhaWxDYWxsYmFjazogKHJlYXNvbjogc3RyaW5nLCBpbmQ6IG51bWJlcikgPT4gYm9vbGVhbiA9ICh0eGlkLCBpbmQpID0+IGZhbHNlLFxuICBibG9jaz86IEJsb2NraGFzaEFuZEZlZUNhbGN1bGF0b3IsXG4pOiBQcm9taXNlPHsgbnVtYmVyOiBudW1iZXI7IHR4czogeyB0eGlkOiBzdHJpbmc7IHNsb3Q6IG51bWJlciB9W10gfT4gPT4ge1xuICBpZiAoIXdhbGxldC5wdWJsaWNLZXkpIHRocm93IG5ldyBXYWxsZXROb3RDb25uZWN0ZWRFcnJvcigpO1xuXG4gIGNvbnN0IHVuc2lnbmVkVHhuczogVHJhbnNhY3Rpb25bXSA9IFtdO1xuXG4gIGlmICghYmxvY2spIHtcbiAgICBibG9jayA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0UmVjZW50QmxvY2toYXNoKGNvbW1pdG1lbnQpO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0cnVjdGlvblNldC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGluc3RydWN0aW9ucyA9IGluc3RydWN0aW9uU2V0W2ldO1xuICAgIGNvbnN0IHNpZ25lcnMgPSBzaWduZXJzU2V0W2ldO1xuXG4gICAgaWYgKGluc3RydWN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpO1xuICAgIGluc3RydWN0aW9ucy5mb3JFYWNoKGluc3RydWN0aW9uID0+IHRyYW5zYWN0aW9uLmFkZChpbnN0cnVjdGlvbikpO1xuICAgIHRyYW5zYWN0aW9uLnJlY2VudEJsb2NraGFzaCA9IGJsb2NrLmJsb2NraGFzaDtcbiAgICB0cmFuc2FjdGlvbi5zZXRTaWduZXJzKFxuICAgICAgLy8gZmVlIHBheWVkIGJ5IHRoZSB3YWxsZXQgb3duZXJcbiAgICAgIHdhbGxldC5wdWJsaWNLZXksXG4gICAgICAuLi5zaWduZXJzLm1hcChzID0+IHMucHVibGljS2V5KSxcbiAgICApO1xuXG4gICAgaWYgKHNpZ25lcnMubGVuZ3RoID4gMCkge1xuICAgICAgdHJhbnNhY3Rpb24ucGFydGlhbFNpZ24oLi4uc2lnbmVycyk7XG4gICAgfVxuXG4gICAgdW5zaWduZWRUeG5zLnB1c2godHJhbnNhY3Rpb24pO1xuICB9XG5cbiAgY29uc3Qgc2lnbmVkVHhucyA9IGF3YWl0IHdhbGxldC5zaWduQWxsVHJhbnNhY3Rpb25zKHVuc2lnbmVkVHhucyk7XG5cbiAgY29uc3QgcGVuZGluZ1R4bnM6IFByb21pc2U8eyB0eGlkOiBzdHJpbmc7IHNsb3Q6IG51bWJlciB9PltdID0gW107XG5cbiAgbGV0IGJyZWFrRWFybHlPYmplY3QgPSB7IGJyZWFrRWFybHk6IGZhbHNlLCBpOiAwIH07XG4gIGNvbnNvbGUubG9nKFxuICAgICdTaWduZWQgdHhucyBsZW5ndGgnLFxuICAgIHNpZ25lZFR4bnMubGVuZ3RoLFxuICAgICd2cyBoYW5kZWQgaW4gbGVuZ3RoJyxcbiAgICBpbnN0cnVjdGlvblNldC5sZW5ndGgsXG4gICk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2lnbmVkVHhucy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNpZ25lZFR4blByb21pc2UgPSBzZW5kU2lnbmVkVHJhbnNhY3Rpb24oe1xuICAgICAgY29ubmVjdGlvbixcbiAgICAgIHNpZ25lZFRyYW5zYWN0aW9uOiBzaWduZWRUeG5zW2ldLFxuICAgIH0pO1xuXG4gICAgc2lnbmVkVHhuUHJvbWlzZVxuICAgICAgLnRoZW4oKHsgdHhpZCwgc2xvdCB9KSA9PiB7XG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjayh0eGlkLCBpKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBmYWlsQ2FsbGJhY2soc2lnbmVkVHhuc1tpXSwgaSk7XG4gICAgICAgIGlmIChzZXF1ZW5jZVR5cGUgPT09IFNlcXVlbmNlVHlwZS5TdG9wT25GYWlsdXJlKSB7XG4gICAgICAgICAgYnJlYWtFYXJseU9iamVjdC5icmVha0Vhcmx5ID0gdHJ1ZTtcbiAgICAgICAgICBicmVha0Vhcmx5T2JqZWN0LmkgPSBpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIGlmIChzZXF1ZW5jZVR5cGUgIT09IFNlcXVlbmNlVHlwZS5QYXJhbGxlbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgc2lnbmVkVHhuUHJvbWlzZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NhdWdodCBmYWlsdXJlJywgZSk7XG4gICAgICAgIGlmIChicmVha0Vhcmx5T2JqZWN0LmJyZWFrRWFybHkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnRGllZCBvbiAnLCBicmVha0Vhcmx5T2JqZWN0LmkpO1xuICAgICAgICAgIC8vIFJldHVybiB0aGUgdHhuIHdlIGZhaWxlZCBvbiBieSBpbmRleFxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBudW1iZXI6IGJyZWFrRWFybHlPYmplY3QuaSxcbiAgICAgICAgICAgIHR4czogYXdhaXQgUHJvbWlzZS5hbGwocGVuZGluZ1R4bnMpLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ1R4bnMucHVzaChzaWduZWRUeG5Qcm9taXNlKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc2VxdWVuY2VUeXBlICE9PSBTZXF1ZW5jZVR5cGUuUGFyYWxsZWwpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChwZW5kaW5nVHhucyk7XG4gIH1cblxuICByZXR1cm4geyBudW1iZXI6IHNpZ25lZFR4bnMubGVuZ3RoLCB0eHM6IGF3YWl0IFByb21pc2UuYWxsKHBlbmRpbmdUeG5zKSB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNlbmRUcmFuc2FjdGlvbiA9IGFzeW5jIChcbiAgY29ubmVjdGlvbjogQ29ubmVjdGlvbixcbiAgd2FsbGV0OiBhbnksXG4gIGluc3RydWN0aW9uczogVHJhbnNhY3Rpb25JbnN0cnVjdGlvbltdLFxuICBzaWduZXJzOiBLZXlwYWlyW10sXG4gIGF3YWl0Q29uZmlybWF0aW9uID0gdHJ1ZSxcbiAgY29tbWl0bWVudDogQ29tbWl0bWVudCA9ICdzaW5nbGVHb3NzaXAnLFxuICBpbmNsdWRlc0ZlZVBheWVyOiBib29sZWFuID0gZmFsc2UsXG4gIGJsb2NrPzogQmxvY2toYXNoQW5kRmVlQ2FsY3VsYXRvcixcbikgPT4ge1xuICBpZiAoIXdhbGxldC5wdWJsaWNLZXkpIHRocm93IG5ldyBXYWxsZXROb3RDb25uZWN0ZWRFcnJvcigpO1xuXG4gIGxldCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpO1xuICBpbnN0cnVjdGlvbnMuZm9yRWFjaChpbnN0cnVjdGlvbiA9PiB0cmFuc2FjdGlvbi5hZGQoaW5zdHJ1Y3Rpb24pKTtcbiAgdHJhbnNhY3Rpb24ucmVjZW50QmxvY2toYXNoID0gKFxuICAgIGJsb2NrIHx8IChhd2FpdCBjb25uZWN0aW9uLmdldFJlY2VudEJsb2NraGFzaChjb21taXRtZW50KSlcbiAgKS5ibG9ja2hhc2g7XG5cbiAgaWYgKGluY2x1ZGVzRmVlUGF5ZXIpIHtcbiAgICB0cmFuc2FjdGlvbi5zZXRTaWduZXJzKC4uLnNpZ25lcnMubWFwKHMgPT4gcy5wdWJsaWNLZXkpKTtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc2FjdGlvbi5zZXRTaWduZXJzKFxuICAgICAgLy8gZmVlIHBheWVkIGJ5IHRoZSB3YWxsZXQgb3duZXJcbiAgICAgIHdhbGxldC5wdWJsaWNLZXksXG4gICAgICAuLi5zaWduZXJzLm1hcChzID0+IHMucHVibGljS2V5KSxcbiAgICApO1xuICB9XG5cbiAgaWYgKHNpZ25lcnMubGVuZ3RoID4gMCkge1xuICAgIHRyYW5zYWN0aW9uLnBhcnRpYWxTaWduKC4uLnNpZ25lcnMpO1xuICB9XG4gIGlmICghaW5jbHVkZXNGZWVQYXllcikge1xuICAgIHRyYW5zYWN0aW9uID0gYXdhaXQgd2FsbGV0LnNpZ25UcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gIH1cblxuICBjb25zdCByYXdUcmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uLnNlcmlhbGl6ZSgpO1xuICBsZXQgb3B0aW9ucyA9IHtcbiAgICBza2lwUHJlZmxpZ2h0OiB0cnVlLFxuICAgIGNvbW1pdG1lbnQsXG4gIH07XG5cbiAgY29uc3QgdHhpZCA9IGF3YWl0IGNvbm5lY3Rpb24uc2VuZFJhd1RyYW5zYWN0aW9uKHJhd1RyYW5zYWN0aW9uLCBvcHRpb25zKTtcbiAgbGV0IHNsb3QgPSAwO1xuXG4gIGlmIChhd2FpdENvbmZpcm1hdGlvbikge1xuICAgIGNvbnN0IGNvbmZpcm1hdGlvbiA9IGF3YWl0IGF3YWl0VHJhbnNhY3Rpb25TaWduYXR1cmVDb25maXJtYXRpb24oXG4gICAgICB0eGlkLFxuICAgICAgREVGQVVMVF9USU1FT1VULFxuICAgICAgY29ubmVjdGlvbixcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgKTtcblxuICAgIGlmICghY29uZmlybWF0aW9uKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaW1lZCBvdXQgYXdhaXRpbmcgY29uZmlybWF0aW9uIG9uIHRyYW5zYWN0aW9uJyk7XG4gICAgc2xvdCA9IGNvbmZpcm1hdGlvbj8uc2xvdCB8fCAwO1xuXG4gICAgaWYgKGNvbmZpcm1hdGlvbj8uZXJyKSB7XG4gICAgICBjb25zdCBlcnJvcnMgPSBhd2FpdCBnZXRFcnJvckZvclRyYW5zYWN0aW9uKGNvbm5lY3Rpb24sIHR4aWQpO1xuXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcnMpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSYXcgdHJhbnNhY3Rpb24gJHt0eGlkfSBmYWlsZWRgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyB0eGlkLCBzbG90IH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2VuZFRyYW5zYWN0aW9uV2l0aFJldHJ5ID0gYXN5bmMgKFxuICBjb25uZWN0aW9uOiBDb25uZWN0aW9uLFxuICB3YWxsZXQ6IGFueSxcbiAgaW5zdHJ1Y3Rpb25zOiBUcmFuc2FjdGlvbkluc3RydWN0aW9uW10sXG4gIHNpZ25lcnM6IEtleXBhaXJbXSxcbiAgY29tbWl0bWVudDogQ29tbWl0bWVudCA9ICdzaW5nbGVHb3NzaXAnLFxuICBpbmNsdWRlc0ZlZVBheWVyOiBib29sZWFuID0gZmFsc2UsXG4gIGJsb2NrPzogQmxvY2toYXNoQW5kRmVlQ2FsY3VsYXRvcixcbiAgYmVmb3JlU2VuZD86ICgpID0+IHZvaWQsXG4pID0+IHtcbiAgaWYgKCF3YWxsZXQucHVibGljS2V5KSB0aHJvdyBuZXcgV2FsbGV0Tm90Q29ubmVjdGVkRXJyb3IoKTtcblxuICBsZXQgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oKTtcbiAgaW5zdHJ1Y3Rpb25zLmZvckVhY2goaW5zdHJ1Y3Rpb24gPT4gdHJhbnNhY3Rpb24uYWRkKGluc3RydWN0aW9uKSk7XG4gIHRyYW5zYWN0aW9uLnJlY2VudEJsb2NraGFzaCA9IChcbiAgICBibG9jayB8fCAoYXdhaXQgY29ubmVjdGlvbi5nZXRSZWNlbnRCbG9ja2hhc2goY29tbWl0bWVudCkpXG4gICkuYmxvY2toYXNoO1xuXG4gIGlmIChpbmNsdWRlc0ZlZVBheWVyKSB7XG4gICAgdHJhbnNhY3Rpb24uc2V0U2lnbmVycyguLi5zaWduZXJzLm1hcChzID0+IHMucHVibGljS2V5KSk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNhY3Rpb24uc2V0U2lnbmVycyhcbiAgICAgIC8vIGZlZSBwYXllZCBieSB0aGUgd2FsbGV0IG93bmVyXG4gICAgICB3YWxsZXQucHVibGljS2V5LFxuICAgICAgLi4uc2lnbmVycy5tYXAocyA9PiBzLnB1YmxpY0tleSksXG4gICAgKTtcbiAgfVxuXG4gIGlmIChzaWduZXJzLmxlbmd0aCA+IDApIHtcbiAgICB0cmFuc2FjdGlvbi5wYXJ0aWFsU2lnbiguLi5zaWduZXJzKTtcbiAgfVxuICBpZiAoIWluY2x1ZGVzRmVlUGF5ZXIpIHtcbiAgICB0cmFuc2FjdGlvbiA9IGF3YWl0IHdhbGxldC5zaWduVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pO1xuICB9XG5cbiAgaWYgKGJlZm9yZVNlbmQpIHtcbiAgICBiZWZvcmVTZW5kKCk7XG4gIH1cblxuICBjb25zdCB7IHR4aWQsIHNsb3QgfSA9IGF3YWl0IHNlbmRTaWduZWRUcmFuc2FjdGlvbih7XG4gICAgY29ubmVjdGlvbixcbiAgICBzaWduZWRUcmFuc2FjdGlvbjogdHJhbnNhY3Rpb24sXG4gIH0pO1xuXG4gIHJldHVybiB7IHR4aWQsIHNsb3QgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRVbml4VHMgPSAoKSA9PiB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDA7XG59O1xuXG5jb25zdCBERUZBVUxUX1RJTUVPVVQgPSAxNTAwMDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRTaWduZWRUcmFuc2FjdGlvbih7XG4gIHNpZ25lZFRyYW5zYWN0aW9uLFxuICBjb25uZWN0aW9uLFxuICB0aW1lb3V0ID0gREVGQVVMVF9USU1FT1VULFxufToge1xuICBzaWduZWRUcmFuc2FjdGlvbjogVHJhbnNhY3Rpb247XG4gIGNvbm5lY3Rpb246IENvbm5lY3Rpb247XG4gIHNlbmRpbmdNZXNzYWdlPzogc3RyaW5nO1xuICBzZW50TWVzc2FnZT86IHN0cmluZztcbiAgc3VjY2Vzc01lc3NhZ2U/OiBzdHJpbmc7XG4gIHRpbWVvdXQ/OiBudW1iZXI7XG59KTogUHJvbWlzZTx7IHR4aWQ6IHN0cmluZzsgc2xvdDogbnVtYmVyIH0+IHtcbiAgY29uc3QgcmF3VHJhbnNhY3Rpb24gPSBzaWduZWRUcmFuc2FjdGlvbi5zZXJpYWxpemUoKTtcbiAgY29uc3Qgc3RhcnRUaW1lID0gZ2V0VW5peFRzKCk7XG4gIGxldCBzbG90ID0gMDtcbiAgY29uc3QgdHhpZDogVHJhbnNhY3Rpb25TaWduYXR1cmUgPSBhd2FpdCBjb25uZWN0aW9uLnNlbmRSYXdUcmFuc2FjdGlvbihcbiAgICByYXdUcmFuc2FjdGlvbixcbiAgICB7XG4gICAgICBza2lwUHJlZmxpZ2h0OiB0cnVlLFxuICAgIH0sXG4gICk7XG5cbiAgY29uc29sZS5sb2coJ1N0YXJ0ZWQgYXdhaXRpbmcgY29uZmlybWF0aW9uIGZvcicsIHR4aWQpO1xuXG4gIGxldCBkb25lID0gZmFsc2U7XG4gIChhc3luYyAoKSA9PiB7XG4gICAgd2hpbGUgKCFkb25lICYmIGdldFVuaXhUcygpIC0gc3RhcnRUaW1lIDwgdGltZW91dCkge1xuICAgICAgY29ubmVjdGlvbi5zZW5kUmF3VHJhbnNhY3Rpb24ocmF3VHJhbnNhY3Rpb24sIHtcbiAgICAgICAgc2tpcFByZWZsaWdodDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgc2xlZXAoNTAwKTtcbiAgICB9XG4gIH0pKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgY29uZmlybWF0aW9uID0gYXdhaXQgYXdhaXRUcmFuc2FjdGlvblNpZ25hdHVyZUNvbmZpcm1hdGlvbihcbiAgICAgIHR4aWQsXG4gICAgICB0aW1lb3V0LFxuICAgICAgY29ubmVjdGlvbixcbiAgICAgICdyZWNlbnQnLFxuICAgICAgdHJ1ZSxcbiAgICApO1xuXG4gICAgaWYgKCFjb25maXJtYXRpb24pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RpbWVkIG91dCBhd2FpdGluZyBjb25maXJtYXRpb24gb24gdHJhbnNhY3Rpb24nKTtcblxuICAgIGlmIChjb25maXJtYXRpb24uZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGNvbmZpcm1hdGlvbi5lcnIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc2FjdGlvbiBmYWlsZWQ6IEN1c3RvbSBpbnN0cnVjdGlvbiBlcnJvcicpO1xuICAgIH1cblxuICAgIHNsb3QgPSBjb25maXJtYXRpb24/LnNsb3QgfHwgMDtcbiAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdUaW1lb3V0IEVycm9yIGNhdWdodCcsIGVycik7XG4gICAgaWYgKGVyci50aW1lb3V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RpbWVkIG91dCBhd2FpdGluZyBjb25maXJtYXRpb24gb24gdHJhbnNhY3Rpb24nKTtcbiAgICB9XG4gICAgbGV0IHNpbXVsYXRlUmVzdWx0OiBTaW11bGF0ZWRUcmFuc2FjdGlvblJlc3BvbnNlIHwgbnVsbCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIHNpbXVsYXRlUmVzdWx0ID0gKFxuICAgICAgICBhd2FpdCBzaW11bGF0ZVRyYW5zYWN0aW9uKGNvbm5lY3Rpb24sIHNpZ25lZFRyYW5zYWN0aW9uLCAnc2luZ2xlJylcbiAgICAgICkudmFsdWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICBpZiAoc2ltdWxhdGVSZXN1bHQgJiYgc2ltdWxhdGVSZXN1bHQuZXJyKSB7XG4gICAgICBpZiAoc2ltdWxhdGVSZXN1bHQubG9ncykge1xuICAgICAgICBmb3IgKGxldCBpID0gc2ltdWxhdGVSZXN1bHQubG9ncy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgIGNvbnN0IGxpbmUgPSBzaW11bGF0ZVJlc3VsdC5sb2dzW2ldO1xuICAgICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoJ1Byb2dyYW0gbG9nOiAnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAnVHJhbnNhY3Rpb24gZmFpbGVkOiAnICsgbGluZS5zbGljZSgnUHJvZ3JhbSBsb2c6ICcubGVuZ3RoKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoc2ltdWxhdGVSZXN1bHQuZXJyKSk7XG4gICAgfVxuICAgIC8vIHRocm93IG5ldyBFcnJvcignVHJhbnNhY3Rpb24gZmFpbGVkJyk7XG4gIH0gZmluYWxseSB7XG4gICAgZG9uZSA9IHRydWU7XG4gIH1cblxuICBjb25zb2xlLmxvZygnTGF0ZW5jeScsIHR4aWQsIGdldFVuaXhUcygpIC0gc3RhcnRUaW1lKTtcbiAgcmV0dXJuIHsgdHhpZCwgc2xvdCB9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBzaW11bGF0ZVRyYW5zYWN0aW9uKFxuICBjb25uZWN0aW9uOiBDb25uZWN0aW9uLFxuICB0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24sXG4gIGNvbW1pdG1lbnQ6IENvbW1pdG1lbnQsXG4pOiBQcm9taXNlPFJwY1Jlc3BvbnNlQW5kQ29udGV4dDxTaW11bGF0ZWRUcmFuc2FjdGlvblJlc3BvbnNlPj4ge1xuICAvLyBAdHMtaWdub3JlXG4gIHRyYW5zYWN0aW9uLnJlY2VudEJsb2NraGFzaCA9IGF3YWl0IGNvbm5lY3Rpb24uX3JlY2VudEJsb2NraGFzaChcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29ubmVjdGlvbi5fZGlzYWJsZUJsb2NraGFzaENhY2hpbmcsXG4gICk7XG5cbiAgY29uc3Qgc2lnbkRhdGEgPSB0cmFuc2FjdGlvbi5zZXJpYWxpemVNZXNzYWdlKCk7XG4gIC8vIEB0cy1pZ25vcmVcbiAgY29uc3Qgd2lyZVRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb24uX3NlcmlhbGl6ZShzaWduRGF0YSk7XG4gIGNvbnN0IGVuY29kZWRUcmFuc2FjdGlvbiA9IHdpcmVUcmFuc2FjdGlvbi50b1N0cmluZygnYmFzZTY0Jyk7XG4gIGNvbnN0IGNvbmZpZzogYW55ID0geyBlbmNvZGluZzogJ2Jhc2U2NCcsIGNvbW1pdG1lbnQgfTtcbiAgY29uc3QgYXJncyA9IFtlbmNvZGVkVHJhbnNhY3Rpb24sIGNvbmZpZ107XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBjb25zdCByZXMgPSBhd2FpdCBjb25uZWN0aW9uLl9ycGNSZXF1ZXN0KCdzaW11bGF0ZVRyYW5zYWN0aW9uJywgYXJncyk7XG4gIGlmIChyZXMuZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBzaW11bGF0ZSB0cmFuc2FjdGlvbjogJyArIHJlcy5lcnJvci5tZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gcmVzLnJlc3VsdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYXdhaXRUcmFuc2FjdGlvblNpZ25hdHVyZUNvbmZpcm1hdGlvbihcbiAgdHhpZDogVHJhbnNhY3Rpb25TaWduYXR1cmUsXG4gIHRpbWVvdXQ6IG51bWJlcixcbiAgY29ubmVjdGlvbjogQ29ubmVjdGlvbixcbiAgY29tbWl0bWVudDogQ29tbWl0bWVudCA9ICdyZWNlbnQnLFxuICBxdWVyeVN0YXR1cyA9IGZhbHNlLFxuKTogUHJvbWlzZTxTaWduYXR1cmVTdGF0dXMgfCBudWxsIHwgdm9pZD4ge1xuICBsZXQgZG9uZSA9IGZhbHNlO1xuICBsZXQgc3RhdHVzOiBTaWduYXR1cmVTdGF0dXMgfCBudWxsIHwgdm9pZCA9IHtcbiAgICBzbG90OiAwLFxuICAgIGNvbmZpcm1hdGlvbnM6IDAsXG4gICAgZXJyOiBudWxsLFxuICB9O1xuICBsZXQgc3ViSWQgPSAwO1xuICBzdGF0dXMgPSBhd2FpdCBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUubG9nKCdSZWplY3RpbmcgZm9yIHRpbWVvdXQuLi4nKTtcbiAgICAgIHJlamVjdCh7IHRpbWVvdXQ6IHRydWUgfSk7XG4gICAgfSwgdGltZW91dCk7XG4gICAgdHJ5IHtcbiAgICAgIHN1YklkID0gY29ubmVjdGlvbi5vblNpZ25hdHVyZShcbiAgICAgICAgdHhpZCxcbiAgICAgICAgKHJlc3VsdCwgY29udGV4dCkgPT4ge1xuICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgIHN0YXR1cyA9IHtcbiAgICAgICAgICAgIGVycjogcmVzdWx0LmVycixcbiAgICAgICAgICAgIHNsb3Q6IGNvbnRleHQuc2xvdCxcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvbnM6IDAsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAocmVzdWx0LmVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlamVjdGVkIHZpYSB3ZWJzb2NrZXQnLCByZXN1bHQuZXJyKTtcbiAgICAgICAgICAgIHJlamVjdChzdGF0dXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUmVzb2x2ZWQgdmlhIHdlYnNvY2tldCcsIHJlc3VsdCk7XG4gICAgICAgICAgICByZXNvbHZlKHN0YXR1cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb21taXRtZW50LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1dTIGVycm9yIGluIHNldHVwJywgdHhpZCwgZSk7XG4gICAgfVxuICAgIHdoaWxlICghZG9uZSAmJiBxdWVyeVN0YXR1cykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBzaWduYXR1cmVTdGF0dXNlcyA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0U2lnbmF0dXJlU3RhdHVzZXMoW1xuICAgICAgICAgICAgdHhpZCxcbiAgICAgICAgICBdKTtcbiAgICAgICAgICBzdGF0dXMgPSBzaWduYXR1cmVTdGF0dXNlcyAmJiBzaWduYXR1cmVTdGF0dXNlcy52YWx1ZVswXTtcbiAgICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICAgIGlmICghc3RhdHVzKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSRVNUIG51bGwgcmVzdWx0IGZvcicsIHR4aWQsIHN0YXR1cyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cy5lcnIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JFU1QgZXJyb3IgZm9yJywgdHhpZCwgc3RhdHVzKTtcbiAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgIHJlamVjdChzdGF0dXMuZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXR1cy5jb25maXJtYXRpb25zKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSRVNUIG5vIGNvbmZpcm1hdGlvbnMgZm9yJywgdHhpZCwgc3RhdHVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSRVNUIGNvbmZpcm1hdGlvbiBmb3InLCB0eGlkLCBzdGF0dXMpO1xuICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShzdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1JFU1QgY29ubmVjdGlvbiBlcnJvcjogdHhpZCcsIHR4aWQsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkoKTtcbiAgICAgIGF3YWl0IHNsZWVwKDIwMDApO1xuICAgIH1cbiAgfSk7XG5cbiAgLy9AdHMtaWdub3JlXG4gIGlmIChjb25uZWN0aW9uLl9zaWduYXR1cmVTdWJzY3JpcHRpb25zW3N1YklkXSlcbiAgICBjb25uZWN0aW9uLnJlbW92ZVNpZ25hdHVyZUxpc3RlbmVyKHN1YklkKTtcbiAgZG9uZSA9IHRydWU7XG4gIGNvbnNvbGUubG9nKCdSZXR1cm5pbmcgc3RhdHVzJywgc3RhdHVzKTtcbiAgcmV0dXJuIHN0YXR1cztcbn1cbmV4cG9ydCBmdW5jdGlvbiBzbGVlcChtczogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cbiJdLCJuYW1lcyI6WyJUcmFuc2FjdGlvbiIsIldhbGxldE5vdENvbm5lY3RlZEVycm9yIiwiZ2V0RXJyb3JGb3JUcmFuc2FjdGlvbiIsImNvbm5lY3Rpb24iLCJ0eGlkIiwiY29uZmlybVRyYW5zYWN0aW9uIiwidHgiLCJnZXRQYXJzZWRDb25maXJtZWRUcmFuc2FjdGlvbiIsImVycm9ycyIsIm1ldGEiLCJsb2dNZXNzYWdlcyIsImZvckVhY2giLCJsb2ciLCJyZWdleCIsIm0iLCJleGVjIiwiaW5kZXgiLCJsYXN0SW5kZXgiLCJsZW5ndGgiLCJwdXNoIiwiU2VxdWVuY2VUeXBlIiwiU2VxdWVudGlhbCIsIlBhcmFsbGVsIiwiU3RvcE9uRmFpbHVyZSIsInNlbmRUcmFuc2FjdGlvbnNXaXRoTWFudWFsUmV0cnkiLCJ3YWxsZXQiLCJpbnN0cnVjdGlvbnMiLCJzaWduZXJzIiwic3RvcFBvaW50IiwidHJpZXMiLCJsYXN0SW5zdHJ1Y3Rpb25zTGVuZ3RoIiwidG9SZW1vdmVTaWduZXJzIiwiZmlsdGVyIiwiaW5zdHIiLCJpIiwiaWRzIiwiZmlsdGVyZWRTaWduZXJzIiwiXyIsInNsaWNlIiwiaWQiLCJzZW5kVHJhbnNhY3Rpb25XaXRoUmV0cnkiLCJ0eHMiLCJzZW5kVHJhbnNhY3Rpb25zIiwiY29uY2F0IiwibWFwIiwidCIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJpbnN0cnVjdGlvblNldCIsInNpZ25lcnNTZXQiLCJzZXF1ZW5jZVR5cGUiLCJjb21taXRtZW50Iiwic3VjY2Vzc0NhbGxiYWNrIiwiaW5kIiwiZmFpbENhbGxiYWNrIiwiYmxvY2siLCJwdWJsaWNLZXkiLCJ1bnNpZ25lZFR4bnMiLCJnZXRSZWNlbnRCbG9ja2hhc2giLCJ0cmFuc2FjdGlvbiIsImluc3RydWN0aW9uIiwiYWRkIiwicmVjZW50QmxvY2toYXNoIiwiYmxvY2toYXNoIiwic2V0U2lnbmVycyIsInMiLCJwYXJ0aWFsU2lnbiIsInNpZ25lZFR4bnMiLCJzaWduQWxsVHJhbnNhY3Rpb25zIiwicGVuZGluZ1R4bnMiLCJicmVha0Vhcmx5T2JqZWN0IiwiYnJlYWtFYXJseSIsInNpZ25lZFR4blByb21pc2UiLCJzZW5kU2lnbmVkVHJhbnNhY3Rpb24iLCJzaWduZWRUcmFuc2FjdGlvbiIsInRoZW4iLCJzbG90IiwiY2F0Y2giLCJyZWFzb24iLCJudW1iZXIiLCJQcm9taXNlIiwiYWxsIiwic2VuZFRyYW5zYWN0aW9uIiwiYXdhaXRDb25maXJtYXRpb24iLCJpbmNsdWRlc0ZlZVBheWVyIiwic2lnblRyYW5zYWN0aW9uIiwicmF3VHJhbnNhY3Rpb24iLCJzZXJpYWxpemUiLCJvcHRpb25zIiwic2tpcFByZWZsaWdodCIsInNlbmRSYXdUcmFuc2FjdGlvbiIsImNvbmZpcm1hdGlvbiIsImF3YWl0VHJhbnNhY3Rpb25TaWduYXR1cmVDb25maXJtYXRpb24iLCJERUZBVUxUX1RJTUVPVVQiLCJFcnJvciIsImVyciIsImJlZm9yZVNlbmQiLCJnZXRVbml4VHMiLCJEYXRlIiwiZ2V0VGltZSIsInRpbWVvdXQiLCJzdGFydFRpbWUiLCJkb25lIiwic2xlZXAiLCJzaW11bGF0ZVJlc3VsdCIsInNpbXVsYXRlVHJhbnNhY3Rpb24iLCJ2YWx1ZSIsImxvZ3MiLCJsaW5lIiwic3RhcnRzV2l0aCIsIkpTT04iLCJzdHJpbmdpZnkiLCJfcmVjZW50QmxvY2toYXNoIiwiX2Rpc2FibGVCbG9ja2hhc2hDYWNoaW5nIiwic2lnbkRhdGEiLCJzZXJpYWxpemVNZXNzYWdlIiwid2lyZVRyYW5zYWN0aW9uIiwiX3NlcmlhbGl6ZSIsImVuY29kZWRUcmFuc2FjdGlvbiIsInRvU3RyaW5nIiwiY29uZmlnIiwiZW5jb2RpbmciLCJhcmdzIiwicmVzIiwiX3JwY1JlcXVlc3QiLCJtZXNzYWdlIiwicmVzdWx0IiwicXVlcnlTdGF0dXMiLCJzdGF0dXMiLCJjb25maXJtYXRpb25zIiwic3ViSWQiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2V0VGltZW91dCIsIm9uU2lnbmF0dXJlIiwiY29udGV4dCIsInNpZ25hdHVyZVN0YXR1c2VzIiwiZ2V0U2lnbmF0dXJlU3RhdHVzZXMiLCJfc2lnbmF0dXJlU3Vic2NyaXB0aW9ucyIsInJlbW92ZVNpZ25hdHVyZUxpc3RlbmVyIiwibXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/connection.tsx\n");

/***/ }),

/***/ "./components/utils.ts":
/*!*****************************!*\
  !*** ./components/utils.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toDate\": () => (/* binding */ toDate),\n/* harmony export */   \"formatNumber\": () => (/* binding */ formatNumber),\n/* harmony export */   \"SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\": () => (/* binding */ SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID),\n/* harmony export */   \"CIVIC\": () => (/* binding */ CIVIC),\n/* harmony export */   \"getAtaForMint\": () => (/* binding */ getAtaForMint),\n/* harmony export */   \"getNetworkExpire\": () => (/* binding */ getNetworkExpire),\n/* harmony export */   \"getNetworkToken\": () => (/* binding */ getNetworkToken),\n/* harmony export */   \"createAssociatedTokenAccountInstruction\": () => (/* binding */ createAssociatedTokenAccountInstruction)\n/* harmony export */ });\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @project-serum/anchor */ \"@project-serum/anchor\");\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/spl-token */ \"@solana/spl-token\");\n/* harmony import */ var _solana_spl_token__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_solana_spl_token__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/web3.js */ \"@solana/web3.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_solana_web3_js__WEBPACK_IMPORTED_MODULE_2__);\n/* this component defines various functions required by the candy-machine.ts component to send instructions\nto the smart contract - copied from metaplex */ \n\n\n\nconst toDate = (value)=>{\n    if (!value) {\n        return;\n    }\n    return new Date(value.toNumber() * 1000);\n};\nconst numberFormater = new Intl.NumberFormat('en-US', {\n    style: 'decimal',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n});\nconst formatNumber = {\n    format: (val)=>{\n        if (!val) {\n            return '--';\n        }\n        return numberFormater.format(val);\n    },\n    asNumber: (val)=>{\n        if (!val) {\n            return undefined;\n        }\n        return val.toNumber() / _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.LAMPORTS_PER_SOL;\n    }\n};\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\nconst CIVIC = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey('gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs');\nconst getAtaForMint = async (mint, buyer)=>{\n    return await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        buyer.toBuffer(),\n        _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID.toBuffer(),\n        mint.toBuffer()\n    ], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID);\n};\nconst getNetworkExpire = async (gatekeeperNetwork)=>{\n    return await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        gatekeeperNetwork.toBuffer(),\n        Buffer.from('expire')\n    ], CIVIC);\n};\nconst getNetworkToken = async (wallet, gatekeeperNetwork)=>{\n    return await _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.PublicKey.findProgramAddress([\n        wallet.toBuffer(),\n        Buffer.from('gateway'),\n        Buffer.from([\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ]),\n        gatekeeperNetwork.toBuffer(), \n    ], CIVIC);\n};\nfunction createAssociatedTokenAccountInstruction(associatedTokenAddress, payer, walletAddress, splTokenMintAddress) {\n    const keys = [\n        {\n            pubkey: payer,\n            isSigner: true,\n            isWritable: true\n        },\n        {\n            pubkey: associatedTokenAddress,\n            isSigner: false,\n            isWritable: true\n        },\n        {\n            pubkey: walletAddress,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: splTokenMintAddress,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.SystemProgram.programId,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _solana_spl_token__WEBPACK_IMPORTED_MODULE_1__.TOKEN_PROGRAM_ID,\n            isSigner: false,\n            isWritable: false\n        },\n        {\n            pubkey: _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false\n        }, \n    ];\n    return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_2__.TransactionInstruction({\n        keys,\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([])\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/utils.ts\n");

/***/ }),

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_wallet_adapter_react_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/wallet-adapter-react-ui */ \"@solana/wallet-adapter-react-ui\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _styles_Home_module_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../styles/Home.module.css */ \"./styles/Home.module.css\");\n/* harmony import */ var _styles_Home_module_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var react_unity_webgl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-unity-webgl */ \"react-unity-webgl\");\n/* harmony import */ var react_unity_webgl__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_unity_webgl__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @project-serum/anchor */ \"@project-serum/anchor\");\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_project_serum_anchor__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"@solana/wallet-adapter-react\");\n/* harmony import */ var _components_candy_machine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/candy-machine */ \"./components/candy-machine.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_solana_wallet_adapter_react_ui__WEBPACK_IMPORTED_MODULE_1__, _components_candy_machine__WEBPACK_IMPORTED_MODULE_7__, _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_6__]);\n([_solana_wallet_adapter_react_ui__WEBPACK_IMPORTED_MODULE_1__, _components_candy_machine__WEBPACK_IMPORTED_MODULE_7__, _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\n/* This function returns the layout of the hompage, including two buttons to connect and disconnect the wallet*/ const Home = ()=>{\n    // call to useWallet function to get the info about connected wallet, like the public key\n    const wallet = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_6__.useWallet)();\n    const anchorWallet = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n            console.log(\"Wallet Not Connected\");\n            return;\n        }\n        return {\n            publicKey: wallet.publicKey,\n            signAllTransactions: wallet.signAllTransactions,\n            signTransaction: wallet.signTransaction\n        };\n    }, [\n        wallet\n    ]);\n    //function declaration -> the setCandyMachine function determines the candyMachine variable\n    const { 0: candyMachine , 1: setCandyMachine  } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)();\n    // takes the wallet variable initialised above and creates an anchorWallet i.e. a Wallet usable by Anchor client\n    // set the host to Devnet\n    const rpcHost = 'https://api.devnet.solana.com';\n    // establish a new connection to the solana devnet\n    const connection = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_5__.web3.Connection(rpcHost ? rpcHost : _project_serum_anchor__WEBPACK_IMPORTED_MODULE_5__.web3.clusterApiUrl('devnet'));\n    const Mint = async ()=>{\n        // turnes the public key string below into a public key object (required for the next functions)\n        const getCandyMachineId = ()=>{\n            try {\n                const candyMachineId = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_5__.web3.PublicKey(\"8aYkMCQRGWdHos3SiDBN5KX8pWZU5uUqVjdVZ4GxvFkY\");\n                return candyMachineId; // returns the candyMachineID\n            } catch (e) {\n                console.log('Failed to construct CandyMachineId', e);\n                return undefined;\n            }\n        };\n        // calls the above function to construct the public key object\n        const candyMachineId1 = getCandyMachineId();\n        // gets the state of the candy machine on the blockchain and stores this with setCandyMachine \n        // in the candyMachine variable declared above\n        if (anchorWallet && candyMachineId1) {\n            const cndy = await (0,_components_candy_machine__WEBPACK_IMPORTED_MODULE_7__.getCandyMachineState)(anchorWallet, candyMachineId1, connection);\n            setCandyMachine(cndy);\n        }\n        // if the wallet is connected and both the candyMachine and wallet PubKey are not NULL, then mint\n        // using the candy machine stored in the candyMachine variable and the wallet Public key of the user\n        if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n            await (0,_components_candy_machine__WEBPACK_IMPORTED_MODULE_7__.mintOneToken)(candyMachine, wallet.publicKey);\n            console.log(\"minted\");\n        }\n    };\n    // here the minting function defined above is called\n    //Minting()\n    const unityContext = new react_unity_webgl__WEBPACK_IMPORTED_MODULE_4__.UnityContext({\n        loaderUrl: \"unitybuild/AnotherTestApp.loader.js\",\n        dataUrl: \"unitybuild/AnotherTestApp.data\",\n        frameworkUrl: \"unitybuild/AnotherTestApp.framework.js\",\n        codeUrl: \"unitybuild/AnotherTestApp.wasm\"\n    });\n    /*\n  useEffect(function(){\n    unityContext.on(\"Mint\", function(){\n      console.log(\"Test\")\n    });\n  })\n*/ function timeout(delay) {\n        return new Promise((res)=>setTimeout(res, delay)\n        );\n    }\n    unityContext.on(\"Mint\", async ()=>{\n        await Mint();\n    });\n    function handleOnClickFullscreen() {\n        unityContext.setFullscreen(true);\n    }\n    return(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_8___default().title),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_3___default()), {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                    children: \"NFT Games\"\n                }, void 0, false, {\n                    fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/index.tsx\",\n                    lineNumber: 129,\n                    columnNumber: 7\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/index.tsx\",\n                lineNumber: 128,\n                columnNumber: 5\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {}, void 0, false, {\n                fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/index.tsx\",\n                lineNumber: 131,\n                columnNumber: 5\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_8___default().main),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_styles_Home_module_css__WEBPACK_IMPORTED_MODULE_8___default().walletButtons),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_solana_wallet_adapter_react_ui__WEBPACK_IMPORTED_MODULE_1__.WalletMultiButton, {}, void 0, false, {\n                                fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/index.tsx\",\n                                lineNumber: 136,\n                                columnNumber: 10\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_solana_wallet_adapter_react_ui__WEBPACK_IMPORTED_MODULE_1__.WalletDisconnectButton, {}, void 0, false, {\n                                fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/index.tsx\",\n                                lineNumber: 137,\n                                columnNumber: 10\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/index.tsx\",\n                        lineNumber: 135,\n                        columnNumber: 8\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((react_unity_webgl__WEBPACK_IMPORTED_MODULE_4___default()), {\n                        unityContext: unityContext,\n                        style: {\n                            height: \"100%\",\n                            width: 950,\n                            border: \"2px solid black\",\n                            background: \"grey\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/index.tsx\",\n                        lineNumber: 139,\n                        columnNumber: 8\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/index.tsx\",\n                lineNumber: 134,\n                columnNumber: 6\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/julia/Desktop/rustTut/reactapp/pages/index.tsx\",\n        lineNumber: 127,\n        columnNumber: 5\n    }, undefined));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Home); /*\n <div className={styles.title}>\n           <Head>\n             <title>NFT Games</title>\n           </Head>\n            <main className={styles.main}>  \n              <div className={styles.walletButtons}>    \n                <WalletMultiButton />\n                <WalletDisconnectButton />\n              </div>\n              <div className={styles.buttons}>\n                <MintButton/>\n              </div>\n       </main>\n        </div>\n\n\n*/ \n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.tsx\n");

/***/ }),

/***/ "@project-serum/anchor":
/*!****************************************!*\
  !*** external "@project-serum/anchor" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@project-serum/anchor");

/***/ }),

/***/ "@solana/spl-token":
/*!************************************!*\
  !*** external "@solana/spl-token" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@solana/spl-token");

/***/ }),

/***/ "@solana/web3.js":
/*!**********************************!*\
  !*** external "@solana/web3.js" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@solana/web3.js");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/head");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react-unity-webgl":
/*!************************************!*\
  !*** external "react-unity-webgl" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-unity-webgl");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "@solana/wallet-adapter-base":
/*!**********************************************!*\
  !*** external "@solana/wallet-adapter-base" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@solana/wallet-adapter-base");;

/***/ }),

/***/ "@solana/wallet-adapter-react":
/*!***********************************************!*\
  !*** external "@solana/wallet-adapter-react" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@solana/wallet-adapter-react");;

/***/ }),

/***/ "@solana/wallet-adapter-react-ui":
/*!**************************************************!*\
  !*** external "@solana/wallet-adapter-react-ui" ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@solana/wallet-adapter-react-ui");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/index.tsx"));
module.exports = __webpack_exports__;

})();